// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: alimama.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_alimama_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_alimama_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_alimama_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_alimama_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_alimama_2eproto;
namespace alimama {
namespace proto {
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class SliceRequest;
class SliceRequestDefaultTypeInternal;
extern SliceRequestDefaultTypeInternal _SliceRequest_default_instance_;
}  // namespace proto
}  // namespace alimama
PROTOBUF_NAMESPACE_OPEN
template<> ::alimama::proto::Request* Arena::CreateMaybeMessage<::alimama::proto::Request>(Arena*);
template<> ::alimama::proto::Response* Arena::CreateMaybeMessage<::alimama::proto::Response>(Arena*);
template<> ::alimama::proto::SliceRequest* Arena::CreateMaybeMessage<::alimama::proto::SliceRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace alimama {
namespace proto {

// ===================================================================

class SliceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:alimama.proto.SliceRequest) */ {
 public:
  inline SliceRequest() : SliceRequest(nullptr) {};
  virtual ~SliceRequest();

  SliceRequest(const SliceRequest& from);
  SliceRequest(SliceRequest&& from) noexcept
    : SliceRequest() {
    *this = ::std::move(from);
  }

  inline SliceRequest& operator=(const SliceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SliceRequest& operator=(SliceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SliceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SliceRequest* internal_default_instance() {
    return reinterpret_cast<const SliceRequest*>(
               &_SliceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SliceRequest& a, SliceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SliceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SliceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SliceRequest* New() const final {
    return CreateMaybeMessage<SliceRequest>(nullptr);
  }

  SliceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SliceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SliceRequest& from);
  void MergeFrom(const SliceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SliceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "alimama.proto.SliceRequest";
  }
  protected:
  explicit SliceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_alimama_2eproto);
    return ::descriptor_table_alimama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlicePartitionFieldNumber = 1,
    kDataStartFieldNumber = 2,
    kDataLenFieldNumber = 3,
  };
  // uint64 slice_partition = 1;
  void clear_slice_partition();
  ::PROTOBUF_NAMESPACE_ID::uint64 slice_partition() const;
  void set_slice_partition(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_slice_partition() const;
  void _internal_set_slice_partition(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 data_start = 2;
  void clear_data_start();
  ::PROTOBUF_NAMESPACE_ID::uint64 data_start() const;
  void set_data_start(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_data_start() const;
  void _internal_set_data_start(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 data_len = 3;
  void clear_data_len();
  ::PROTOBUF_NAMESPACE_ID::uint64 data_len() const;
  void set_data_len(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_data_len() const;
  void _internal_set_data_len(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:alimama.proto.SliceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 slice_partition_;
  ::PROTOBUF_NAMESPACE_ID::uint64 data_start_;
  ::PROTOBUF_NAMESPACE_ID::uint64 data_len_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_alimama_2eproto;
};
// -------------------------------------------------------------------

class Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:alimama.proto.Request) */ {
 public:
  inline Request() : Request(nullptr) {};
  virtual ~Request();

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "alimama.proto.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_alimama_2eproto);
    return ::descriptor_table_alimama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSliceRequestFieldNumber = 1,
  };
  // repeated .alimama.proto.SliceRequest slice_request = 1;
  int slice_request_size() const;
  private:
  int _internal_slice_request_size() const;
  public:
  void clear_slice_request();
  ::alimama::proto::SliceRequest* mutable_slice_request(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::alimama::proto::SliceRequest >*
      mutable_slice_request();
  private:
  const ::alimama::proto::SliceRequest& _internal_slice_request(int index) const;
  ::alimama::proto::SliceRequest* _internal_add_slice_request();
  public:
  const ::alimama::proto::SliceRequest& slice_request(int index) const;
  ::alimama::proto::SliceRequest* add_slice_request();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::alimama::proto::SliceRequest >&
      slice_request() const;

  // @@protoc_insertion_point(class_scope:alimama.proto.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::alimama::proto::SliceRequest > slice_request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_alimama_2eproto;
};
// -------------------------------------------------------------------

class Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:alimama.proto.Response) */ {
 public:
  inline Response() : Response(nullptr) {};
  virtual ~Response();

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "alimama.proto.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_alimama_2eproto);
    return ::descriptor_table_alimama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSliceDataFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated bytes slice_data = 2;
  int slice_data_size() const;
  private:
  int _internal_slice_data_size() const;
  public:
  void clear_slice_data();
  const std::string& slice_data(int index) const;
  std::string* mutable_slice_data(int index);
  void set_slice_data(int index, const std::string& value);
  void set_slice_data(int index, std::string&& value);
  void set_slice_data(int index, const char* value);
  void set_slice_data(int index, const void* value, size_t size);
  std::string* add_slice_data();
  void add_slice_data(const std::string& value);
  void add_slice_data(std::string&& value);
  void add_slice_data(const char* value);
  void add_slice_data(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& slice_data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_slice_data();
  private:
  const std::string& _internal_slice_data(int index) const;
  std::string* _internal_add_slice_data();
  public:

  // int32 status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:alimama.proto.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> slice_data_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_alimama_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SliceRequest

// uint64 slice_partition = 1;
inline void SliceRequest::clear_slice_partition() {
  slice_partition_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SliceRequest::_internal_slice_partition() const {
  return slice_partition_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SliceRequest::slice_partition() const {
  // @@protoc_insertion_point(field_get:alimama.proto.SliceRequest.slice_partition)
  return _internal_slice_partition();
}
inline void SliceRequest::_internal_set_slice_partition(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  slice_partition_ = value;
}
inline void SliceRequest::set_slice_partition(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_slice_partition(value);
  // @@protoc_insertion_point(field_set:alimama.proto.SliceRequest.slice_partition)
}

// uint64 data_start = 2;
inline void SliceRequest::clear_data_start() {
  data_start_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SliceRequest::_internal_data_start() const {
  return data_start_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SliceRequest::data_start() const {
  // @@protoc_insertion_point(field_get:alimama.proto.SliceRequest.data_start)
  return _internal_data_start();
}
inline void SliceRequest::_internal_set_data_start(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  data_start_ = value;
}
inline void SliceRequest::set_data_start(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_data_start(value);
  // @@protoc_insertion_point(field_set:alimama.proto.SliceRequest.data_start)
}

// uint64 data_len = 3;
inline void SliceRequest::clear_data_len() {
  data_len_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SliceRequest::_internal_data_len() const {
  return data_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SliceRequest::data_len() const {
  // @@protoc_insertion_point(field_get:alimama.proto.SliceRequest.data_len)
  return _internal_data_len();
}
inline void SliceRequest::_internal_set_data_len(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  data_len_ = value;
}
inline void SliceRequest::set_data_len(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_data_len(value);
  // @@protoc_insertion_point(field_set:alimama.proto.SliceRequest.data_len)
}

// -------------------------------------------------------------------

// Request

// repeated .alimama.proto.SliceRequest slice_request = 1;
inline int Request::_internal_slice_request_size() const {
  return slice_request_.size();
}
inline int Request::slice_request_size() const {
  return _internal_slice_request_size();
}
inline void Request::clear_slice_request() {
  slice_request_.Clear();
}
inline ::alimama::proto::SliceRequest* Request::mutable_slice_request(int index) {
  // @@protoc_insertion_point(field_mutable:alimama.proto.Request.slice_request)
  return slice_request_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::alimama::proto::SliceRequest >*
Request::mutable_slice_request() {
  // @@protoc_insertion_point(field_mutable_list:alimama.proto.Request.slice_request)
  return &slice_request_;
}
inline const ::alimama::proto::SliceRequest& Request::_internal_slice_request(int index) const {
  return slice_request_.Get(index);
}
inline const ::alimama::proto::SliceRequest& Request::slice_request(int index) const {
  // @@protoc_insertion_point(field_get:alimama.proto.Request.slice_request)
  return _internal_slice_request(index);
}
inline ::alimama::proto::SliceRequest* Request::_internal_add_slice_request() {
  return slice_request_.Add();
}
inline ::alimama::proto::SliceRequest* Request::add_slice_request() {
  // @@protoc_insertion_point(field_add:alimama.proto.Request.slice_request)
  return _internal_add_slice_request();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::alimama::proto::SliceRequest >&
Request::slice_request() const {
  // @@protoc_insertion_point(field_list:alimama.proto.Request.slice_request)
  return slice_request_;
}

// -------------------------------------------------------------------

// Response

// int32 status = 1;
inline void Response::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Response::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Response::status() const {
  // @@protoc_insertion_point(field_get:alimama.proto.Response.status)
  return _internal_status();
}
inline void Response::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void Response::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:alimama.proto.Response.status)
}

// repeated bytes slice_data = 2;
inline int Response::_internal_slice_data_size() const {
  return slice_data_.size();
}
inline int Response::slice_data_size() const {
  return _internal_slice_data_size();
}
inline void Response::clear_slice_data() {
  slice_data_.Clear();
}
inline std::string* Response::add_slice_data() {
  // @@protoc_insertion_point(field_add_mutable:alimama.proto.Response.slice_data)
  return _internal_add_slice_data();
}
inline const std::string& Response::_internal_slice_data(int index) const {
  return slice_data_.Get(index);
}
inline const std::string& Response::slice_data(int index) const {
  // @@protoc_insertion_point(field_get:alimama.proto.Response.slice_data)
  return _internal_slice_data(index);
}
inline std::string* Response::mutable_slice_data(int index) {
  // @@protoc_insertion_point(field_mutable:alimama.proto.Response.slice_data)
  return slice_data_.Mutable(index);
}
inline void Response::set_slice_data(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:alimama.proto.Response.slice_data)
  slice_data_.Mutable(index)->assign(value);
}
inline void Response::set_slice_data(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:alimama.proto.Response.slice_data)
  slice_data_.Mutable(index)->assign(std::move(value));
}
inline void Response::set_slice_data(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  slice_data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:alimama.proto.Response.slice_data)
}
inline void Response::set_slice_data(int index, const void* value, size_t size) {
  slice_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:alimama.proto.Response.slice_data)
}
inline std::string* Response::_internal_add_slice_data() {
  return slice_data_.Add();
}
inline void Response::add_slice_data(const std::string& value) {
  slice_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:alimama.proto.Response.slice_data)
}
inline void Response::add_slice_data(std::string&& value) {
  slice_data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:alimama.proto.Response.slice_data)
}
inline void Response::add_slice_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  slice_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:alimama.proto.Response.slice_data)
}
inline void Response::add_slice_data(const void* value, size_t size) {
  slice_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:alimama.proto.Response.slice_data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Response::slice_data() const {
  // @@protoc_insertion_point(field_list:alimama.proto.Response.slice_data)
  return slice_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Response::mutable_slice_data() {
  // @@protoc_insertion_point(field_mutable_list:alimama.proto.Response.slice_data)
  return &slice_data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace alimama

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_alimama_2eproto
