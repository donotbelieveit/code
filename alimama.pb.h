// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: alimama.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_alimama_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_alimama_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_alimama_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_alimama_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_alimama_2eproto;
namespace alimama {
namespace proto {
class BlockData;
class BlockDataDefaultTypeInternal;
extern BlockDataDefaultTypeInternal _BlockData_default_instance_;
class BlockInfo;
class BlockInfoDefaultTypeInternal;
extern BlockInfoDefaultTypeInternal _BlockInfo_default_instance_;
class GetBlockDataRequest;
class GetBlockDataRequestDefaultTypeInternal;
extern GetBlockDataRequestDefaultTypeInternal _GetBlockDataRequest_default_instance_;
class GetBlockDataResponse;
class GetBlockDataResponseDefaultTypeInternal;
extern GetBlockDataResponseDefaultTypeInternal _GetBlockDataResponse_default_instance_;
class LoadAndRemoveRequest;
class LoadAndRemoveRequestDefaultTypeInternal;
extern LoadAndRemoveRequestDefaultTypeInternal _LoadAndRemoveRequest_default_instance_;
class LoadAndRemoveResponse;
class LoadAndRemoveResponseDefaultTypeInternal;
extern LoadAndRemoveResponseDefaultTypeInternal _LoadAndRemoveResponse_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class SendCopyRequest;
class SendCopyRequestDefaultTypeInternal;
extern SendCopyRequestDefaultTypeInternal _SendCopyRequest_default_instance_;
class SendCopyResponse;
class SendCopyResponseDefaultTypeInternal;
extern SendCopyResponseDefaultTypeInternal _SendCopyResponse_default_instance_;
class Slice2BlockRequest;
class Slice2BlockRequestDefaultTypeInternal;
extern Slice2BlockRequestDefaultTypeInternal _Slice2BlockRequest_default_instance_;
class Slice2BlockResponse;
class Slice2BlockResponseDefaultTypeInternal;
extern Slice2BlockResponseDefaultTypeInternal _Slice2BlockResponse_default_instance_;
class SliceInfo;
class SliceInfoDefaultTypeInternal;
extern SliceInfoDefaultTypeInternal _SliceInfo_default_instance_;
class SliceRequest;
class SliceRequestDefaultTypeInternal;
extern SliceRequestDefaultTypeInternal _SliceRequest_default_instance_;
}  // namespace proto
}  // namespace alimama
PROTOBUF_NAMESPACE_OPEN
template<> ::alimama::proto::BlockData* Arena::CreateMaybeMessage<::alimama::proto::BlockData>(Arena*);
template<> ::alimama::proto::BlockInfo* Arena::CreateMaybeMessage<::alimama::proto::BlockInfo>(Arena*);
template<> ::alimama::proto::GetBlockDataRequest* Arena::CreateMaybeMessage<::alimama::proto::GetBlockDataRequest>(Arena*);
template<> ::alimama::proto::GetBlockDataResponse* Arena::CreateMaybeMessage<::alimama::proto::GetBlockDataResponse>(Arena*);
template<> ::alimama::proto::LoadAndRemoveRequest* Arena::CreateMaybeMessage<::alimama::proto::LoadAndRemoveRequest>(Arena*);
template<> ::alimama::proto::LoadAndRemoveResponse* Arena::CreateMaybeMessage<::alimama::proto::LoadAndRemoveResponse>(Arena*);
template<> ::alimama::proto::Request* Arena::CreateMaybeMessage<::alimama::proto::Request>(Arena*);
template<> ::alimama::proto::Response* Arena::CreateMaybeMessage<::alimama::proto::Response>(Arena*);
template<> ::alimama::proto::SendCopyRequest* Arena::CreateMaybeMessage<::alimama::proto::SendCopyRequest>(Arena*);
template<> ::alimama::proto::SendCopyResponse* Arena::CreateMaybeMessage<::alimama::proto::SendCopyResponse>(Arena*);
template<> ::alimama::proto::Slice2BlockRequest* Arena::CreateMaybeMessage<::alimama::proto::Slice2BlockRequest>(Arena*);
template<> ::alimama::proto::Slice2BlockResponse* Arena::CreateMaybeMessage<::alimama::proto::Slice2BlockResponse>(Arena*);
template<> ::alimama::proto::SliceInfo* Arena::CreateMaybeMessage<::alimama::proto::SliceInfo>(Arena*);
template<> ::alimama::proto::SliceRequest* Arena::CreateMaybeMessage<::alimama::proto::SliceRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace alimama {
namespace proto {

// ===================================================================

class SliceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:alimama.proto.SliceRequest) */ {
 public:
  inline SliceRequest() : SliceRequest(nullptr) {};
  virtual ~SliceRequest();

  SliceRequest(const SliceRequest& from);
  SliceRequest(SliceRequest&& from) noexcept
    : SliceRequest() {
    *this = ::std::move(from);
  }

  inline SliceRequest& operator=(const SliceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SliceRequest& operator=(SliceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SliceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SliceRequest* internal_default_instance() {
    return reinterpret_cast<const SliceRequest*>(
               &_SliceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SliceRequest& a, SliceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SliceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SliceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SliceRequest* New() const final {
    return CreateMaybeMessage<SliceRequest>(nullptr);
  }

  SliceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SliceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SliceRequest& from);
  void MergeFrom(const SliceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SliceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "alimama.proto.SliceRequest";
  }
  protected:
  explicit SliceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_alimama_2eproto);
    return ::descriptor_table_alimama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlicePartitionFieldNumber = 1,
    kDataStartFieldNumber = 2,
    kDataLenFieldNumber = 3,
  };
  // uint64 slice_partition = 1;
  void clear_slice_partition();
  ::PROTOBUF_NAMESPACE_ID::uint64 slice_partition() const;
  void set_slice_partition(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_slice_partition() const;
  void _internal_set_slice_partition(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 data_start = 2;
  void clear_data_start();
  ::PROTOBUF_NAMESPACE_ID::uint64 data_start() const;
  void set_data_start(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_data_start() const;
  void _internal_set_data_start(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 data_len = 3;
  void clear_data_len();
  ::PROTOBUF_NAMESPACE_ID::uint64 data_len() const;
  void set_data_len(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_data_len() const;
  void _internal_set_data_len(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:alimama.proto.SliceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 slice_partition_;
  ::PROTOBUF_NAMESPACE_ID::uint64 data_start_;
  ::PROTOBUF_NAMESPACE_ID::uint64 data_len_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_alimama_2eproto;
};
// -------------------------------------------------------------------

class Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:alimama.proto.Request) */ {
 public:
  inline Request() : Request(nullptr) {};
  virtual ~Request();

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "alimama.proto.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_alimama_2eproto);
    return ::descriptor_table_alimama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSliceRequestFieldNumber = 1,
  };
  // repeated .alimama.proto.SliceRequest slice_request = 1;
  int slice_request_size() const;
  private:
  int _internal_slice_request_size() const;
  public:
  void clear_slice_request();
  ::alimama::proto::SliceRequest* mutable_slice_request(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::alimama::proto::SliceRequest >*
      mutable_slice_request();
  private:
  const ::alimama::proto::SliceRequest& _internal_slice_request(int index) const;
  ::alimama::proto::SliceRequest* _internal_add_slice_request();
  public:
  const ::alimama::proto::SliceRequest& slice_request(int index) const;
  ::alimama::proto::SliceRequest* add_slice_request();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::alimama::proto::SliceRequest >&
      slice_request() const;

  // @@protoc_insertion_point(class_scope:alimama.proto.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::alimama::proto::SliceRequest > slice_request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_alimama_2eproto;
};
// -------------------------------------------------------------------

class Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:alimama.proto.Response) */ {
 public:
  inline Response() : Response(nullptr) {};
  virtual ~Response();

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "alimama.proto.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_alimama_2eproto);
    return ::descriptor_table_alimama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSliceDataFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated bytes slice_data = 2;
  int slice_data_size() const;
  private:
  int _internal_slice_data_size() const;
  public:
  void clear_slice_data();
  const std::string& slice_data(int index) const;
  std::string* mutable_slice_data(int index);
  void set_slice_data(int index, const std::string& value);
  void set_slice_data(int index, std::string&& value);
  void set_slice_data(int index, const char* value);
  void set_slice_data(int index, const void* value, size_t size);
  std::string* add_slice_data();
  void add_slice_data(const std::string& value);
  void add_slice_data(std::string&& value);
  void add_slice_data(const char* value);
  void add_slice_data(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& slice_data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_slice_data();
  private:
  const std::string& _internal_slice_data(int index) const;
  std::string* _internal_add_slice_data();
  public:

  // int32 status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:alimama.proto.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> slice_data_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_alimama_2eproto;
};
// -------------------------------------------------------------------

class BlockInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:alimama.proto.BlockInfo) */ {
 public:
  inline BlockInfo() : BlockInfo(nullptr) {};
  virtual ~BlockInfo();

  BlockInfo(const BlockInfo& from);
  BlockInfo(BlockInfo&& from) noexcept
    : BlockInfo() {
    *this = ::std::move(from);
  }

  inline BlockInfo& operator=(const BlockInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockInfo& operator=(BlockInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlockInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockInfo* internal_default_instance() {
    return reinterpret_cast<const BlockInfo*>(
               &_BlockInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BlockInfo& a, BlockInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockInfo* New() const final {
    return CreateMaybeMessage<BlockInfo>(nullptr);
  }

  BlockInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlockInfo& from);
  void MergeFrom(const BlockInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "alimama.proto.BlockInfo";
  }
  protected:
  explicit BlockInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_alimama_2eproto);
    return ::descriptor_table_alimama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlicePartitionFieldNumber = 1,
    kIndexFieldNumber = 2,
    kNodeId1FieldNumber = 3,
    kNodeId2FieldNumber = 4,
  };
  // uint64 slice_partition = 1;
  void clear_slice_partition();
  ::PROTOBUF_NAMESPACE_ID::uint64 slice_partition() const;
  void set_slice_partition(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_slice_partition() const;
  void _internal_set_slice_partition(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 index = 2;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 node_id1 = 3;
  void clear_node_id1();
  ::PROTOBUF_NAMESPACE_ID::uint32 node_id1() const;
  void set_node_id1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_node_id1() const;
  void _internal_set_node_id1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 node_id2 = 4;
  void clear_node_id2();
  ::PROTOBUF_NAMESPACE_ID::uint32 node_id2() const;
  void set_node_id2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_node_id2() const;
  void _internal_set_node_id2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:alimama.proto.BlockInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 slice_partition_;
  ::PROTOBUF_NAMESPACE_ID::uint64 index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 node_id1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 node_id2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_alimama_2eproto;
};
// -------------------------------------------------------------------

class SliceInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:alimama.proto.SliceInfo) */ {
 public:
  inline SliceInfo() : SliceInfo(nullptr) {};
  virtual ~SliceInfo();

  SliceInfo(const SliceInfo& from);
  SliceInfo(SliceInfo&& from) noexcept
    : SliceInfo() {
    *this = ::std::move(from);
  }

  inline SliceInfo& operator=(const SliceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SliceInfo& operator=(SliceInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SliceInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SliceInfo* internal_default_instance() {
    return reinterpret_cast<const SliceInfo*>(
               &_SliceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SliceInfo& a, SliceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SliceInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SliceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SliceInfo* New() const final {
    return CreateMaybeMessage<SliceInfo>(nullptr);
  }

  SliceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SliceInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SliceInfo& from);
  void MergeFrom(const SliceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SliceInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "alimama.proto.SliceInfo";
  }
  protected:
  explicit SliceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_alimama_2eproto);
    return ::descriptor_table_alimama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockInfoFieldNumber = 3,
    kVersionFieldNumber = 1,
    kSlicePartitionFieldNumber = 2,
  };
  // repeated .alimama.proto.BlockInfo block_info = 3;
  int block_info_size() const;
  private:
  int _internal_block_info_size() const;
  public:
  void clear_block_info();
  ::alimama::proto::BlockInfo* mutable_block_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::alimama::proto::BlockInfo >*
      mutable_block_info();
  private:
  const ::alimama::proto::BlockInfo& _internal_block_info(int index) const;
  ::alimama::proto::BlockInfo* _internal_add_block_info();
  public:
  const ::alimama::proto::BlockInfo& block_info(int index) const;
  ::alimama::proto::BlockInfo* add_block_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::alimama::proto::BlockInfo >&
      block_info() const;

  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_version();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_version(
      std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // uint64 slice_partition = 2;
  void clear_slice_partition();
  ::PROTOBUF_NAMESPACE_ID::uint64 slice_partition() const;
  void set_slice_partition(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_slice_partition() const;
  void _internal_set_slice_partition(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:alimama.proto.SliceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::alimama::proto::BlockInfo > block_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::uint64 slice_partition_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_alimama_2eproto;
};
// -------------------------------------------------------------------

class Slice2BlockRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:alimama.proto.Slice2BlockRequest) */ {
 public:
  inline Slice2BlockRequest() : Slice2BlockRequest(nullptr) {};
  virtual ~Slice2BlockRequest();

  Slice2BlockRequest(const Slice2BlockRequest& from);
  Slice2BlockRequest(Slice2BlockRequest&& from) noexcept
    : Slice2BlockRequest() {
    *this = ::std::move(from);
  }

  inline Slice2BlockRequest& operator=(const Slice2BlockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Slice2BlockRequest& operator=(Slice2BlockRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Slice2BlockRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Slice2BlockRequest* internal_default_instance() {
    return reinterpret_cast<const Slice2BlockRequest*>(
               &_Slice2BlockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Slice2BlockRequest& a, Slice2BlockRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Slice2BlockRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Slice2BlockRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Slice2BlockRequest* New() const final {
    return CreateMaybeMessage<Slice2BlockRequest>(nullptr);
  }

  Slice2BlockRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Slice2BlockRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Slice2BlockRequest& from);
  void MergeFrom(const Slice2BlockRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Slice2BlockRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "alimama.proto.Slice2BlockRequest";
  }
  protected:
  explicit Slice2BlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_alimama_2eproto);
    return ::descriptor_table_alimama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSliceInfoFieldNumber = 1,
  };
  // repeated .alimama.proto.SliceInfo slice_info = 1;
  int slice_info_size() const;
  private:
  int _internal_slice_info_size() const;
  public:
  void clear_slice_info();
  ::alimama::proto::SliceInfo* mutable_slice_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::alimama::proto::SliceInfo >*
      mutable_slice_info();
  private:
  const ::alimama::proto::SliceInfo& _internal_slice_info(int index) const;
  ::alimama::proto::SliceInfo* _internal_add_slice_info();
  public:
  const ::alimama::proto::SliceInfo& slice_info(int index) const;
  ::alimama::proto::SliceInfo* add_slice_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::alimama::proto::SliceInfo >&
      slice_info() const;

  // @@protoc_insertion_point(class_scope:alimama.proto.Slice2BlockRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::alimama::proto::SliceInfo > slice_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_alimama_2eproto;
};
// -------------------------------------------------------------------

class Slice2BlockResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:alimama.proto.Slice2BlockResponse) */ {
 public:
  inline Slice2BlockResponse() : Slice2BlockResponse(nullptr) {};
  virtual ~Slice2BlockResponse();

  Slice2BlockResponse(const Slice2BlockResponse& from);
  Slice2BlockResponse(Slice2BlockResponse&& from) noexcept
    : Slice2BlockResponse() {
    *this = ::std::move(from);
  }

  inline Slice2BlockResponse& operator=(const Slice2BlockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Slice2BlockResponse& operator=(Slice2BlockResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Slice2BlockResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Slice2BlockResponse* internal_default_instance() {
    return reinterpret_cast<const Slice2BlockResponse*>(
               &_Slice2BlockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Slice2BlockResponse& a, Slice2BlockResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Slice2BlockResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Slice2BlockResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Slice2BlockResponse* New() const final {
    return CreateMaybeMessage<Slice2BlockResponse>(nullptr);
  }

  Slice2BlockResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Slice2BlockResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Slice2BlockResponse& from);
  void MergeFrom(const Slice2BlockResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Slice2BlockResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "alimama.proto.Slice2BlockResponse";
  }
  protected:
  explicit Slice2BlockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_alimama_2eproto);
    return ::descriptor_table_alimama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOkFieldNumber = 1,
  };
  // bool ok = 1;
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);
  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:alimama.proto.Slice2BlockResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool ok_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_alimama_2eproto;
};
// -------------------------------------------------------------------

class BlockData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:alimama.proto.BlockData) */ {
 public:
  inline BlockData() : BlockData(nullptr) {};
  virtual ~BlockData();

  BlockData(const BlockData& from);
  BlockData(BlockData&& from) noexcept
    : BlockData() {
    *this = ::std::move(from);
  }

  inline BlockData& operator=(const BlockData& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockData& operator=(BlockData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlockData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockData* internal_default_instance() {
    return reinterpret_cast<const BlockData*>(
               &_BlockData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BlockData& a, BlockData& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockData* New() const final {
    return CreateMaybeMessage<BlockData>(nullptr);
  }

  BlockData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlockData& from);
  void MergeFrom(const BlockData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "alimama.proto.BlockData";
  }
  protected:
  explicit BlockData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_alimama_2eproto);
    return ::descriptor_table_alimama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNode1FieldNumber = 3,
    kNode2FieldNumber = 4,
    kDataFieldNumber = 5,
    kVersionFieldNumber = 6,
    kSlicePartitionFieldNumber = 1,
    kBlockIndexFieldNumber = 2,
  };
  // string node1 = 3;
  void clear_node1();
  const std::string& node1() const;
  void set_node1(const std::string& value);
  void set_node1(std::string&& value);
  void set_node1(const char* value);
  void set_node1(const char* value, size_t size);
  std::string* mutable_node1();
  std::string* release_node1();
  void set_allocated_node1(std::string* node1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_node1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_node1(
      std::string* node1);
  private:
  const std::string& _internal_node1() const;
  void _internal_set_node1(const std::string& value);
  std::string* _internal_mutable_node1();
  public:

  // string node2 = 4;
  void clear_node2();
  const std::string& node2() const;
  void set_node2(const std::string& value);
  void set_node2(std::string&& value);
  void set_node2(const char* value);
  void set_node2(const char* value, size_t size);
  std::string* mutable_node2();
  std::string* release_node2();
  void set_allocated_node2(std::string* node2);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_node2();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_node2(
      std::string* node2);
  private:
  const std::string& _internal_node2() const;
  void _internal_set_node2(const std::string& value);
  std::string* _internal_mutable_node2();
  public:

  // bytes data = 5;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // string version = 6;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_version();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_version(
      std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // uint64 slice_partition = 1;
  void clear_slice_partition();
  ::PROTOBUF_NAMESPACE_ID::uint64 slice_partition() const;
  void set_slice_partition(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_slice_partition() const;
  void _internal_set_slice_partition(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 block_index = 2;
  void clear_block_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 block_index() const;
  void set_block_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_block_index() const;
  void _internal_set_block_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:alimama.proto.BlockData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::uint64 slice_partition_;
  ::PROTOBUF_NAMESPACE_ID::uint64 block_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_alimama_2eproto;
};
// -------------------------------------------------------------------

class GetBlockDataRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:alimama.proto.GetBlockDataRequest) */ {
 public:
  inline GetBlockDataRequest() : GetBlockDataRequest(nullptr) {};
  virtual ~GetBlockDataRequest();

  GetBlockDataRequest(const GetBlockDataRequest& from);
  GetBlockDataRequest(GetBlockDataRequest&& from) noexcept
    : GetBlockDataRequest() {
    *this = ::std::move(from);
  }

  inline GetBlockDataRequest& operator=(const GetBlockDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockDataRequest& operator=(GetBlockDataRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBlockDataRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBlockDataRequest* internal_default_instance() {
    return reinterpret_cast<const GetBlockDataRequest*>(
               &_GetBlockDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetBlockDataRequest& a, GetBlockDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockDataRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBlockDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBlockDataRequest* New() const final {
    return CreateMaybeMessage<GetBlockDataRequest>(nullptr);
  }

  GetBlockDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBlockDataRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBlockDataRequest& from);
  void MergeFrom(const GetBlockDataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockDataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "alimama.proto.GetBlockDataRequest";
  }
  protected:
  explicit GetBlockDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_alimama_2eproto);
    return ::descriptor_table_alimama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockInfoFieldNumber = 1,
  };
  // repeated .alimama.proto.BlockInfo block_info = 1;
  int block_info_size() const;
  private:
  int _internal_block_info_size() const;
  public:
  void clear_block_info();
  ::alimama::proto::BlockInfo* mutable_block_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::alimama::proto::BlockInfo >*
      mutable_block_info();
  private:
  const ::alimama::proto::BlockInfo& _internal_block_info(int index) const;
  ::alimama::proto::BlockInfo* _internal_add_block_info();
  public:
  const ::alimama::proto::BlockInfo& block_info(int index) const;
  ::alimama::proto::BlockInfo* add_block_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::alimama::proto::BlockInfo >&
      block_info() const;

  // @@protoc_insertion_point(class_scope:alimama.proto.GetBlockDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::alimama::proto::BlockInfo > block_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_alimama_2eproto;
};
// -------------------------------------------------------------------

class GetBlockDataResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:alimama.proto.GetBlockDataResponse) */ {
 public:
  inline GetBlockDataResponse() : GetBlockDataResponse(nullptr) {};
  virtual ~GetBlockDataResponse();

  GetBlockDataResponse(const GetBlockDataResponse& from);
  GetBlockDataResponse(GetBlockDataResponse&& from) noexcept
    : GetBlockDataResponse() {
    *this = ::std::move(from);
  }

  inline GetBlockDataResponse& operator=(const GetBlockDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockDataResponse& operator=(GetBlockDataResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBlockDataResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBlockDataResponse* internal_default_instance() {
    return reinterpret_cast<const GetBlockDataResponse*>(
               &_GetBlockDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetBlockDataResponse& a, GetBlockDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockDataResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBlockDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBlockDataResponse* New() const final {
    return CreateMaybeMessage<GetBlockDataResponse>(nullptr);
  }

  GetBlockDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBlockDataResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBlockDataResponse& from);
  void MergeFrom(const GetBlockDataResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockDataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "alimama.proto.GetBlockDataResponse";
  }
  protected:
  explicit GetBlockDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_alimama_2eproto);
    return ::descriptor_table_alimama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockDataFieldNumber = 1,
  };
  // repeated .alimama.proto.BlockData block_data = 1;
  int block_data_size() const;
  private:
  int _internal_block_data_size() const;
  public:
  void clear_block_data();
  ::alimama::proto::BlockData* mutable_block_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::alimama::proto::BlockData >*
      mutable_block_data();
  private:
  const ::alimama::proto::BlockData& _internal_block_data(int index) const;
  ::alimama::proto::BlockData* _internal_add_block_data();
  public:
  const ::alimama::proto::BlockData& block_data(int index) const;
  ::alimama::proto::BlockData* add_block_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::alimama::proto::BlockData >&
      block_data() const;

  // @@protoc_insertion_point(class_scope:alimama.proto.GetBlockDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::alimama::proto::BlockData > block_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_alimama_2eproto;
};
// -------------------------------------------------------------------

class SendCopyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:alimama.proto.SendCopyRequest) */ {
 public:
  inline SendCopyRequest() : SendCopyRequest(nullptr) {};
  virtual ~SendCopyRequest();

  SendCopyRequest(const SendCopyRequest& from);
  SendCopyRequest(SendCopyRequest&& from) noexcept
    : SendCopyRequest() {
    *this = ::std::move(from);
  }

  inline SendCopyRequest& operator=(const SendCopyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendCopyRequest& operator=(SendCopyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendCopyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendCopyRequest* internal_default_instance() {
    return reinterpret_cast<const SendCopyRequest*>(
               &_SendCopyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SendCopyRequest& a, SendCopyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendCopyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendCopyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendCopyRequest* New() const final {
    return CreateMaybeMessage<SendCopyRequest>(nullptr);
  }

  SendCopyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendCopyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendCopyRequest& from);
  void MergeFrom(const SendCopyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendCopyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "alimama.proto.SendCopyRequest";
  }
  protected:
  explicit SendCopyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_alimama_2eproto);
    return ::descriptor_table_alimama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockDataFieldNumber = 1,
  };
  // .alimama.proto.BlockData block_data = 1;
  bool has_block_data() const;
  private:
  bool _internal_has_block_data() const;
  public:
  void clear_block_data();
  const ::alimama::proto::BlockData& block_data() const;
  ::alimama::proto::BlockData* release_block_data();
  ::alimama::proto::BlockData* mutable_block_data();
  void set_allocated_block_data(::alimama::proto::BlockData* block_data);
  private:
  const ::alimama::proto::BlockData& _internal_block_data() const;
  ::alimama::proto::BlockData* _internal_mutable_block_data();
  public:
  void unsafe_arena_set_allocated_block_data(
      ::alimama::proto::BlockData* block_data);
  ::alimama::proto::BlockData* unsafe_arena_release_block_data();

  // @@protoc_insertion_point(class_scope:alimama.proto.SendCopyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::alimama::proto::BlockData* block_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_alimama_2eproto;
};
// -------------------------------------------------------------------

class SendCopyResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:alimama.proto.SendCopyResponse) */ {
 public:
  inline SendCopyResponse() : SendCopyResponse(nullptr) {};
  virtual ~SendCopyResponse();

  SendCopyResponse(const SendCopyResponse& from);
  SendCopyResponse(SendCopyResponse&& from) noexcept
    : SendCopyResponse() {
    *this = ::std::move(from);
  }

  inline SendCopyResponse& operator=(const SendCopyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendCopyResponse& operator=(SendCopyResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendCopyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendCopyResponse* internal_default_instance() {
    return reinterpret_cast<const SendCopyResponse*>(
               &_SendCopyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SendCopyResponse& a, SendCopyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SendCopyResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendCopyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendCopyResponse* New() const final {
    return CreateMaybeMessage<SendCopyResponse>(nullptr);
  }

  SendCopyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendCopyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendCopyResponse& from);
  void MergeFrom(const SendCopyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendCopyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "alimama.proto.SendCopyResponse";
  }
  protected:
  explicit SendCopyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_alimama_2eproto);
    return ::descriptor_table_alimama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOkFieldNumber = 1,
  };
  // bool ok = 1;
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);
  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:alimama.proto.SendCopyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool ok_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_alimama_2eproto;
};
// -------------------------------------------------------------------

class LoadAndRemoveRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:alimama.proto.LoadAndRemoveRequest) */ {
 public:
  inline LoadAndRemoveRequest() : LoadAndRemoveRequest(nullptr) {};
  virtual ~LoadAndRemoveRequest();

  LoadAndRemoveRequest(const LoadAndRemoveRequest& from);
  LoadAndRemoveRequest(LoadAndRemoveRequest&& from) noexcept
    : LoadAndRemoveRequest() {
    *this = ::std::move(from);
  }

  inline LoadAndRemoveRequest& operator=(const LoadAndRemoveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadAndRemoveRequest& operator=(LoadAndRemoveRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadAndRemoveRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadAndRemoveRequest* internal_default_instance() {
    return reinterpret_cast<const LoadAndRemoveRequest*>(
               &_LoadAndRemoveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(LoadAndRemoveRequest& a, LoadAndRemoveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadAndRemoveRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadAndRemoveRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadAndRemoveRequest* New() const final {
    return CreateMaybeMessage<LoadAndRemoveRequest>(nullptr);
  }

  LoadAndRemoveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadAndRemoveRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadAndRemoveRequest& from);
  void MergeFrom(const LoadAndRemoveRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadAndRemoveRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "alimama.proto.LoadAndRemoveRequest";
  }
  protected:
  explicit LoadAndRemoveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_alimama_2eproto);
    return ::descriptor_table_alimama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSliceInfoFieldNumber = 1,
  };
  // repeated .alimama.proto.SliceInfo slice_info = 1;
  int slice_info_size() const;
  private:
  int _internal_slice_info_size() const;
  public:
  void clear_slice_info();
  ::alimama::proto::SliceInfo* mutable_slice_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::alimama::proto::SliceInfo >*
      mutable_slice_info();
  private:
  const ::alimama::proto::SliceInfo& _internal_slice_info(int index) const;
  ::alimama::proto::SliceInfo* _internal_add_slice_info();
  public:
  const ::alimama::proto::SliceInfo& slice_info(int index) const;
  ::alimama::proto::SliceInfo* add_slice_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::alimama::proto::SliceInfo >&
      slice_info() const;

  // @@protoc_insertion_point(class_scope:alimama.proto.LoadAndRemoveRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::alimama::proto::SliceInfo > slice_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_alimama_2eproto;
};
// -------------------------------------------------------------------

class LoadAndRemoveResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:alimama.proto.LoadAndRemoveResponse) */ {
 public:
  inline LoadAndRemoveResponse() : LoadAndRemoveResponse(nullptr) {};
  virtual ~LoadAndRemoveResponse();

  LoadAndRemoveResponse(const LoadAndRemoveResponse& from);
  LoadAndRemoveResponse(LoadAndRemoveResponse&& from) noexcept
    : LoadAndRemoveResponse() {
    *this = ::std::move(from);
  }

  inline LoadAndRemoveResponse& operator=(const LoadAndRemoveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadAndRemoveResponse& operator=(LoadAndRemoveResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadAndRemoveResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadAndRemoveResponse* internal_default_instance() {
    return reinterpret_cast<const LoadAndRemoveResponse*>(
               &_LoadAndRemoveResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(LoadAndRemoveResponse& a, LoadAndRemoveResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadAndRemoveResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadAndRemoveResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadAndRemoveResponse* New() const final {
    return CreateMaybeMessage<LoadAndRemoveResponse>(nullptr);
  }

  LoadAndRemoveResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadAndRemoveResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadAndRemoveResponse& from);
  void MergeFrom(const LoadAndRemoveResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadAndRemoveResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "alimama.proto.LoadAndRemoveResponse";
  }
  protected:
  explicit LoadAndRemoveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_alimama_2eproto);
    return ::descriptor_table_alimama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOkFieldNumber = 1,
  };
  // bool ok = 1;
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);
  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:alimama.proto.LoadAndRemoveResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool ok_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_alimama_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SliceRequest

// uint64 slice_partition = 1;
inline void SliceRequest::clear_slice_partition() {
  slice_partition_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SliceRequest::_internal_slice_partition() const {
  return slice_partition_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SliceRequest::slice_partition() const {
  // @@protoc_insertion_point(field_get:alimama.proto.SliceRequest.slice_partition)
  return _internal_slice_partition();
}
inline void SliceRequest::_internal_set_slice_partition(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  slice_partition_ = value;
}
inline void SliceRequest::set_slice_partition(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_slice_partition(value);
  // @@protoc_insertion_point(field_set:alimama.proto.SliceRequest.slice_partition)
}

// uint64 data_start = 2;
inline void SliceRequest::clear_data_start() {
  data_start_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SliceRequest::_internal_data_start() const {
  return data_start_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SliceRequest::data_start() const {
  // @@protoc_insertion_point(field_get:alimama.proto.SliceRequest.data_start)
  return _internal_data_start();
}
inline void SliceRequest::_internal_set_data_start(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  data_start_ = value;
}
inline void SliceRequest::set_data_start(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_data_start(value);
  // @@protoc_insertion_point(field_set:alimama.proto.SliceRequest.data_start)
}

// uint64 data_len = 3;
inline void SliceRequest::clear_data_len() {
  data_len_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SliceRequest::_internal_data_len() const {
  return data_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SliceRequest::data_len() const {
  // @@protoc_insertion_point(field_get:alimama.proto.SliceRequest.data_len)
  return _internal_data_len();
}
inline void SliceRequest::_internal_set_data_len(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  data_len_ = value;
}
inline void SliceRequest::set_data_len(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_data_len(value);
  // @@protoc_insertion_point(field_set:alimama.proto.SliceRequest.data_len)
}

// -------------------------------------------------------------------

// Request

// repeated .alimama.proto.SliceRequest slice_request = 1;
inline int Request::_internal_slice_request_size() const {
  return slice_request_.size();
}
inline int Request::slice_request_size() const {
  return _internal_slice_request_size();
}
inline void Request::clear_slice_request() {
  slice_request_.Clear();
}
inline ::alimama::proto::SliceRequest* Request::mutable_slice_request(int index) {
  // @@protoc_insertion_point(field_mutable:alimama.proto.Request.slice_request)
  return slice_request_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::alimama::proto::SliceRequest >*
Request::mutable_slice_request() {
  // @@protoc_insertion_point(field_mutable_list:alimama.proto.Request.slice_request)
  return &slice_request_;
}
inline const ::alimama::proto::SliceRequest& Request::_internal_slice_request(int index) const {
  return slice_request_.Get(index);
}
inline const ::alimama::proto::SliceRequest& Request::slice_request(int index) const {
  // @@protoc_insertion_point(field_get:alimama.proto.Request.slice_request)
  return _internal_slice_request(index);
}
inline ::alimama::proto::SliceRequest* Request::_internal_add_slice_request() {
  return slice_request_.Add();
}
inline ::alimama::proto::SliceRequest* Request::add_slice_request() {
  // @@protoc_insertion_point(field_add:alimama.proto.Request.slice_request)
  return _internal_add_slice_request();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::alimama::proto::SliceRequest >&
Request::slice_request() const {
  // @@protoc_insertion_point(field_list:alimama.proto.Request.slice_request)
  return slice_request_;
}

// -------------------------------------------------------------------

// Response

// int32 status = 1;
inline void Response::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Response::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Response::status() const {
  // @@protoc_insertion_point(field_get:alimama.proto.Response.status)
  return _internal_status();
}
inline void Response::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void Response::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:alimama.proto.Response.status)
}

// repeated bytes slice_data = 2;
inline int Response::_internal_slice_data_size() const {
  return slice_data_.size();
}
inline int Response::slice_data_size() const {
  return _internal_slice_data_size();
}
inline void Response::clear_slice_data() {
  slice_data_.Clear();
}
inline std::string* Response::add_slice_data() {
  // @@protoc_insertion_point(field_add_mutable:alimama.proto.Response.slice_data)
  return _internal_add_slice_data();
}
inline const std::string& Response::_internal_slice_data(int index) const {
  return slice_data_.Get(index);
}
inline const std::string& Response::slice_data(int index) const {
  // @@protoc_insertion_point(field_get:alimama.proto.Response.slice_data)
  return _internal_slice_data(index);
}
inline std::string* Response::mutable_slice_data(int index) {
  // @@protoc_insertion_point(field_mutable:alimama.proto.Response.slice_data)
  return slice_data_.Mutable(index);
}
inline void Response::set_slice_data(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:alimama.proto.Response.slice_data)
  slice_data_.Mutable(index)->assign(value);
}
inline void Response::set_slice_data(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:alimama.proto.Response.slice_data)
  slice_data_.Mutable(index)->assign(std::move(value));
}
inline void Response::set_slice_data(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  slice_data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:alimama.proto.Response.slice_data)
}
inline void Response::set_slice_data(int index, const void* value, size_t size) {
  slice_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:alimama.proto.Response.slice_data)
}
inline std::string* Response::_internal_add_slice_data() {
  return slice_data_.Add();
}
inline void Response::add_slice_data(const std::string& value) {
  slice_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:alimama.proto.Response.slice_data)
}
inline void Response::add_slice_data(std::string&& value) {
  slice_data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:alimama.proto.Response.slice_data)
}
inline void Response::add_slice_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  slice_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:alimama.proto.Response.slice_data)
}
inline void Response::add_slice_data(const void* value, size_t size) {
  slice_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:alimama.proto.Response.slice_data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Response::slice_data() const {
  // @@protoc_insertion_point(field_list:alimama.proto.Response.slice_data)
  return slice_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Response::mutable_slice_data() {
  // @@protoc_insertion_point(field_mutable_list:alimama.proto.Response.slice_data)
  return &slice_data_;
}

// -------------------------------------------------------------------

// BlockInfo

// uint64 slice_partition = 1;
inline void BlockInfo::clear_slice_partition() {
  slice_partition_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockInfo::_internal_slice_partition() const {
  return slice_partition_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockInfo::slice_partition() const {
  // @@protoc_insertion_point(field_get:alimama.proto.BlockInfo.slice_partition)
  return _internal_slice_partition();
}
inline void BlockInfo::_internal_set_slice_partition(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  slice_partition_ = value;
}
inline void BlockInfo::set_slice_partition(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_slice_partition(value);
  // @@protoc_insertion_point(field_set:alimama.proto.BlockInfo.slice_partition)
}

// uint64 index = 2;
inline void BlockInfo::clear_index() {
  index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockInfo::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockInfo::index() const {
  // @@protoc_insertion_point(field_get:alimama.proto.BlockInfo.index)
  return _internal_index();
}
inline void BlockInfo::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  index_ = value;
}
inline void BlockInfo::set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:alimama.proto.BlockInfo.index)
}

// uint32 node_id1 = 3;
inline void BlockInfo::clear_node_id1() {
  node_id1_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockInfo::_internal_node_id1() const {
  return node_id1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockInfo::node_id1() const {
  // @@protoc_insertion_point(field_get:alimama.proto.BlockInfo.node_id1)
  return _internal_node_id1();
}
inline void BlockInfo::_internal_set_node_id1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  node_id1_ = value;
}
inline void BlockInfo::set_node_id1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_node_id1(value);
  // @@protoc_insertion_point(field_set:alimama.proto.BlockInfo.node_id1)
}

// uint32 node_id2 = 4;
inline void BlockInfo::clear_node_id2() {
  node_id2_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockInfo::_internal_node_id2() const {
  return node_id2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockInfo::node_id2() const {
  // @@protoc_insertion_point(field_get:alimama.proto.BlockInfo.node_id2)
  return _internal_node_id2();
}
inline void BlockInfo::_internal_set_node_id2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  node_id2_ = value;
}
inline void BlockInfo::set_node_id2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_node_id2(value);
  // @@protoc_insertion_point(field_set:alimama.proto.BlockInfo.node_id2)
}

// -------------------------------------------------------------------

// SliceInfo

// string version = 1;
inline void SliceInfo::clear_version() {
  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SliceInfo::version() const {
  // @@protoc_insertion_point(field_get:alimama.proto.SliceInfo.version)
  return _internal_version();
}
inline void SliceInfo::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:alimama.proto.SliceInfo.version)
}
inline std::string* SliceInfo::mutable_version() {
  // @@protoc_insertion_point(field_mutable:alimama.proto.SliceInfo.version)
  return _internal_mutable_version();
}
inline const std::string& SliceInfo::_internal_version() const {
  return version_.Get();
}
inline void SliceInfo::_internal_set_version(const std::string& value) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SliceInfo::set_version(std::string&& value) {
  
  version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:alimama.proto.SliceInfo.version)
}
inline void SliceInfo::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:alimama.proto.SliceInfo.version)
}
inline void SliceInfo::set_version(const char* value,
    size_t size) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:alimama.proto.SliceInfo.version)
}
inline std::string* SliceInfo::_internal_mutable_version() {
  
  return version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SliceInfo::release_version() {
  // @@protoc_insertion_point(field_release:alimama.proto.SliceInfo.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SliceInfo::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:alimama.proto.SliceInfo.version)
}
inline std::string* SliceInfo::unsafe_arena_release_version() {
  // @@protoc_insertion_point(field_unsafe_arena_release:alimama.proto.SliceInfo.version)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return version_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SliceInfo::unsafe_arena_set_allocated_version(
    std::string* version) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (version != nullptr) {
    
  } else {
    
  }
  version_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      version, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:alimama.proto.SliceInfo.version)
}

// uint64 slice_partition = 2;
inline void SliceInfo::clear_slice_partition() {
  slice_partition_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SliceInfo::_internal_slice_partition() const {
  return slice_partition_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SliceInfo::slice_partition() const {
  // @@protoc_insertion_point(field_get:alimama.proto.SliceInfo.slice_partition)
  return _internal_slice_partition();
}
inline void SliceInfo::_internal_set_slice_partition(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  slice_partition_ = value;
}
inline void SliceInfo::set_slice_partition(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_slice_partition(value);
  // @@protoc_insertion_point(field_set:alimama.proto.SliceInfo.slice_partition)
}

// repeated .alimama.proto.BlockInfo block_info = 3;
inline int SliceInfo::_internal_block_info_size() const {
  return block_info_.size();
}
inline int SliceInfo::block_info_size() const {
  return _internal_block_info_size();
}
inline void SliceInfo::clear_block_info() {
  block_info_.Clear();
}
inline ::alimama::proto::BlockInfo* SliceInfo::mutable_block_info(int index) {
  // @@protoc_insertion_point(field_mutable:alimama.proto.SliceInfo.block_info)
  return block_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::alimama::proto::BlockInfo >*
SliceInfo::mutable_block_info() {
  // @@protoc_insertion_point(field_mutable_list:alimama.proto.SliceInfo.block_info)
  return &block_info_;
}
inline const ::alimama::proto::BlockInfo& SliceInfo::_internal_block_info(int index) const {
  return block_info_.Get(index);
}
inline const ::alimama::proto::BlockInfo& SliceInfo::block_info(int index) const {
  // @@protoc_insertion_point(field_get:alimama.proto.SliceInfo.block_info)
  return _internal_block_info(index);
}
inline ::alimama::proto::BlockInfo* SliceInfo::_internal_add_block_info() {
  return block_info_.Add();
}
inline ::alimama::proto::BlockInfo* SliceInfo::add_block_info() {
  // @@protoc_insertion_point(field_add:alimama.proto.SliceInfo.block_info)
  return _internal_add_block_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::alimama::proto::BlockInfo >&
SliceInfo::block_info() const {
  // @@protoc_insertion_point(field_list:alimama.proto.SliceInfo.block_info)
  return block_info_;
}

// -------------------------------------------------------------------

// Slice2BlockRequest

// repeated .alimama.proto.SliceInfo slice_info = 1;
inline int Slice2BlockRequest::_internal_slice_info_size() const {
  return slice_info_.size();
}
inline int Slice2BlockRequest::slice_info_size() const {
  return _internal_slice_info_size();
}
inline void Slice2BlockRequest::clear_slice_info() {
  slice_info_.Clear();
}
inline ::alimama::proto::SliceInfo* Slice2BlockRequest::mutable_slice_info(int index) {
  // @@protoc_insertion_point(field_mutable:alimama.proto.Slice2BlockRequest.slice_info)
  return slice_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::alimama::proto::SliceInfo >*
Slice2BlockRequest::mutable_slice_info() {
  // @@protoc_insertion_point(field_mutable_list:alimama.proto.Slice2BlockRequest.slice_info)
  return &slice_info_;
}
inline const ::alimama::proto::SliceInfo& Slice2BlockRequest::_internal_slice_info(int index) const {
  return slice_info_.Get(index);
}
inline const ::alimama::proto::SliceInfo& Slice2BlockRequest::slice_info(int index) const {
  // @@protoc_insertion_point(field_get:alimama.proto.Slice2BlockRequest.slice_info)
  return _internal_slice_info(index);
}
inline ::alimama::proto::SliceInfo* Slice2BlockRequest::_internal_add_slice_info() {
  return slice_info_.Add();
}
inline ::alimama::proto::SliceInfo* Slice2BlockRequest::add_slice_info() {
  // @@protoc_insertion_point(field_add:alimama.proto.Slice2BlockRequest.slice_info)
  return _internal_add_slice_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::alimama::proto::SliceInfo >&
Slice2BlockRequest::slice_info() const {
  // @@protoc_insertion_point(field_list:alimama.proto.Slice2BlockRequest.slice_info)
  return slice_info_;
}

// -------------------------------------------------------------------

// Slice2BlockResponse

// bool ok = 1;
inline void Slice2BlockResponse::clear_ok() {
  ok_ = false;
}
inline bool Slice2BlockResponse::_internal_ok() const {
  return ok_;
}
inline bool Slice2BlockResponse::ok() const {
  // @@protoc_insertion_point(field_get:alimama.proto.Slice2BlockResponse.ok)
  return _internal_ok();
}
inline void Slice2BlockResponse::_internal_set_ok(bool value) {
  
  ok_ = value;
}
inline void Slice2BlockResponse::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:alimama.proto.Slice2BlockResponse.ok)
}

// -------------------------------------------------------------------

// BlockData

// uint64 slice_partition = 1;
inline void BlockData::clear_slice_partition() {
  slice_partition_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockData::_internal_slice_partition() const {
  return slice_partition_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockData::slice_partition() const {
  // @@protoc_insertion_point(field_get:alimama.proto.BlockData.slice_partition)
  return _internal_slice_partition();
}
inline void BlockData::_internal_set_slice_partition(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  slice_partition_ = value;
}
inline void BlockData::set_slice_partition(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_slice_partition(value);
  // @@protoc_insertion_point(field_set:alimama.proto.BlockData.slice_partition)
}

// uint64 block_index = 2;
inline void BlockData::clear_block_index() {
  block_index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockData::_internal_block_index() const {
  return block_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockData::block_index() const {
  // @@protoc_insertion_point(field_get:alimama.proto.BlockData.block_index)
  return _internal_block_index();
}
inline void BlockData::_internal_set_block_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  block_index_ = value;
}
inline void BlockData::set_block_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_block_index(value);
  // @@protoc_insertion_point(field_set:alimama.proto.BlockData.block_index)
}

// string node1 = 3;
inline void BlockData::clear_node1() {
  node1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BlockData::node1() const {
  // @@protoc_insertion_point(field_get:alimama.proto.BlockData.node1)
  return _internal_node1();
}
inline void BlockData::set_node1(const std::string& value) {
  _internal_set_node1(value);
  // @@protoc_insertion_point(field_set:alimama.proto.BlockData.node1)
}
inline std::string* BlockData::mutable_node1() {
  // @@protoc_insertion_point(field_mutable:alimama.proto.BlockData.node1)
  return _internal_mutable_node1();
}
inline const std::string& BlockData::_internal_node1() const {
  return node1_.Get();
}
inline void BlockData::_internal_set_node1(const std::string& value) {
  
  node1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BlockData::set_node1(std::string&& value) {
  
  node1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:alimama.proto.BlockData.node1)
}
inline void BlockData::set_node1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:alimama.proto.BlockData.node1)
}
inline void BlockData::set_node1(const char* value,
    size_t size) {
  
  node1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:alimama.proto.BlockData.node1)
}
inline std::string* BlockData::_internal_mutable_node1() {
  
  return node1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BlockData::release_node1() {
  // @@protoc_insertion_point(field_release:alimama.proto.BlockData.node1)
  return node1_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BlockData::set_allocated_node1(std::string* node1) {
  if (node1 != nullptr) {
    
  } else {
    
  }
  node1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node1,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:alimama.proto.BlockData.node1)
}
inline std::string* BlockData::unsafe_arena_release_node1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:alimama.proto.BlockData.node1)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return node1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BlockData::unsafe_arena_set_allocated_node1(
    std::string* node1) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (node1 != nullptr) {
    
  } else {
    
  }
  node1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      node1, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:alimama.proto.BlockData.node1)
}

// string node2 = 4;
inline void BlockData::clear_node2() {
  node2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BlockData::node2() const {
  // @@protoc_insertion_point(field_get:alimama.proto.BlockData.node2)
  return _internal_node2();
}
inline void BlockData::set_node2(const std::string& value) {
  _internal_set_node2(value);
  // @@protoc_insertion_point(field_set:alimama.proto.BlockData.node2)
}
inline std::string* BlockData::mutable_node2() {
  // @@protoc_insertion_point(field_mutable:alimama.proto.BlockData.node2)
  return _internal_mutable_node2();
}
inline const std::string& BlockData::_internal_node2() const {
  return node2_.Get();
}
inline void BlockData::_internal_set_node2(const std::string& value) {
  
  node2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BlockData::set_node2(std::string&& value) {
  
  node2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:alimama.proto.BlockData.node2)
}
inline void BlockData::set_node2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:alimama.proto.BlockData.node2)
}
inline void BlockData::set_node2(const char* value,
    size_t size) {
  
  node2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:alimama.proto.BlockData.node2)
}
inline std::string* BlockData::_internal_mutable_node2() {
  
  return node2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BlockData::release_node2() {
  // @@protoc_insertion_point(field_release:alimama.proto.BlockData.node2)
  return node2_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BlockData::set_allocated_node2(std::string* node2) {
  if (node2 != nullptr) {
    
  } else {
    
  }
  node2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node2,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:alimama.proto.BlockData.node2)
}
inline std::string* BlockData::unsafe_arena_release_node2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:alimama.proto.BlockData.node2)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return node2_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BlockData::unsafe_arena_set_allocated_node2(
    std::string* node2) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (node2 != nullptr) {
    
  } else {
    
  }
  node2_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      node2, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:alimama.proto.BlockData.node2)
}

// bytes data = 5;
inline void BlockData::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BlockData::data() const {
  // @@protoc_insertion_point(field_get:alimama.proto.BlockData.data)
  return _internal_data();
}
inline void BlockData::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:alimama.proto.BlockData.data)
}
inline std::string* BlockData::mutable_data() {
  // @@protoc_insertion_point(field_mutable:alimama.proto.BlockData.data)
  return _internal_mutable_data();
}
inline const std::string& BlockData::_internal_data() const {
  return data_.Get();
}
inline void BlockData::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BlockData::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:alimama.proto.BlockData.data)
}
inline void BlockData::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:alimama.proto.BlockData.data)
}
inline void BlockData::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:alimama.proto.BlockData.data)
}
inline std::string* BlockData::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BlockData::release_data() {
  // @@protoc_insertion_point(field_release:alimama.proto.BlockData.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BlockData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:alimama.proto.BlockData.data)
}
inline std::string* BlockData::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:alimama.proto.BlockData.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BlockData::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:alimama.proto.BlockData.data)
}

// string version = 6;
inline void BlockData::clear_version() {
  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BlockData::version() const {
  // @@protoc_insertion_point(field_get:alimama.proto.BlockData.version)
  return _internal_version();
}
inline void BlockData::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:alimama.proto.BlockData.version)
}
inline std::string* BlockData::mutable_version() {
  // @@protoc_insertion_point(field_mutable:alimama.proto.BlockData.version)
  return _internal_mutable_version();
}
inline const std::string& BlockData::_internal_version() const {
  return version_.Get();
}
inline void BlockData::_internal_set_version(const std::string& value) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BlockData::set_version(std::string&& value) {
  
  version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:alimama.proto.BlockData.version)
}
inline void BlockData::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:alimama.proto.BlockData.version)
}
inline void BlockData::set_version(const char* value,
    size_t size) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:alimama.proto.BlockData.version)
}
inline std::string* BlockData::_internal_mutable_version() {
  
  return version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BlockData::release_version() {
  // @@protoc_insertion_point(field_release:alimama.proto.BlockData.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BlockData::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:alimama.proto.BlockData.version)
}
inline std::string* BlockData::unsafe_arena_release_version() {
  // @@protoc_insertion_point(field_unsafe_arena_release:alimama.proto.BlockData.version)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return version_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BlockData::unsafe_arena_set_allocated_version(
    std::string* version) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (version != nullptr) {
    
  } else {
    
  }
  version_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      version, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:alimama.proto.BlockData.version)
}

// -------------------------------------------------------------------

// GetBlockDataRequest

// repeated .alimama.proto.BlockInfo block_info = 1;
inline int GetBlockDataRequest::_internal_block_info_size() const {
  return block_info_.size();
}
inline int GetBlockDataRequest::block_info_size() const {
  return _internal_block_info_size();
}
inline void GetBlockDataRequest::clear_block_info() {
  block_info_.Clear();
}
inline ::alimama::proto::BlockInfo* GetBlockDataRequest::mutable_block_info(int index) {
  // @@protoc_insertion_point(field_mutable:alimama.proto.GetBlockDataRequest.block_info)
  return block_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::alimama::proto::BlockInfo >*
GetBlockDataRequest::mutable_block_info() {
  // @@protoc_insertion_point(field_mutable_list:alimama.proto.GetBlockDataRequest.block_info)
  return &block_info_;
}
inline const ::alimama::proto::BlockInfo& GetBlockDataRequest::_internal_block_info(int index) const {
  return block_info_.Get(index);
}
inline const ::alimama::proto::BlockInfo& GetBlockDataRequest::block_info(int index) const {
  // @@protoc_insertion_point(field_get:alimama.proto.GetBlockDataRequest.block_info)
  return _internal_block_info(index);
}
inline ::alimama::proto::BlockInfo* GetBlockDataRequest::_internal_add_block_info() {
  return block_info_.Add();
}
inline ::alimama::proto::BlockInfo* GetBlockDataRequest::add_block_info() {
  // @@protoc_insertion_point(field_add:alimama.proto.GetBlockDataRequest.block_info)
  return _internal_add_block_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::alimama::proto::BlockInfo >&
GetBlockDataRequest::block_info() const {
  // @@protoc_insertion_point(field_list:alimama.proto.GetBlockDataRequest.block_info)
  return block_info_;
}

// -------------------------------------------------------------------

// GetBlockDataResponse

// repeated .alimama.proto.BlockData block_data = 1;
inline int GetBlockDataResponse::_internal_block_data_size() const {
  return block_data_.size();
}
inline int GetBlockDataResponse::block_data_size() const {
  return _internal_block_data_size();
}
inline void GetBlockDataResponse::clear_block_data() {
  block_data_.Clear();
}
inline ::alimama::proto::BlockData* GetBlockDataResponse::mutable_block_data(int index) {
  // @@protoc_insertion_point(field_mutable:alimama.proto.GetBlockDataResponse.block_data)
  return block_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::alimama::proto::BlockData >*
GetBlockDataResponse::mutable_block_data() {
  // @@protoc_insertion_point(field_mutable_list:alimama.proto.GetBlockDataResponse.block_data)
  return &block_data_;
}
inline const ::alimama::proto::BlockData& GetBlockDataResponse::_internal_block_data(int index) const {
  return block_data_.Get(index);
}
inline const ::alimama::proto::BlockData& GetBlockDataResponse::block_data(int index) const {
  // @@protoc_insertion_point(field_get:alimama.proto.GetBlockDataResponse.block_data)
  return _internal_block_data(index);
}
inline ::alimama::proto::BlockData* GetBlockDataResponse::_internal_add_block_data() {
  return block_data_.Add();
}
inline ::alimama::proto::BlockData* GetBlockDataResponse::add_block_data() {
  // @@protoc_insertion_point(field_add:alimama.proto.GetBlockDataResponse.block_data)
  return _internal_add_block_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::alimama::proto::BlockData >&
GetBlockDataResponse::block_data() const {
  // @@protoc_insertion_point(field_list:alimama.proto.GetBlockDataResponse.block_data)
  return block_data_;
}

// -------------------------------------------------------------------

// SendCopyRequest

// .alimama.proto.BlockData block_data = 1;
inline bool SendCopyRequest::_internal_has_block_data() const {
  return this != internal_default_instance() && block_data_ != nullptr;
}
inline bool SendCopyRequest::has_block_data() const {
  return _internal_has_block_data();
}
inline void SendCopyRequest::clear_block_data() {
  if (GetArena() == nullptr && block_data_ != nullptr) {
    delete block_data_;
  }
  block_data_ = nullptr;
}
inline const ::alimama::proto::BlockData& SendCopyRequest::_internal_block_data() const {
  const ::alimama::proto::BlockData* p = block_data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::alimama::proto::BlockData*>(
      &::alimama::proto::_BlockData_default_instance_);
}
inline const ::alimama::proto::BlockData& SendCopyRequest::block_data() const {
  // @@protoc_insertion_point(field_get:alimama.proto.SendCopyRequest.block_data)
  return _internal_block_data();
}
inline void SendCopyRequest::unsafe_arena_set_allocated_block_data(
    ::alimama::proto::BlockData* block_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_data_);
  }
  block_data_ = block_data;
  if (block_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:alimama.proto.SendCopyRequest.block_data)
}
inline ::alimama::proto::BlockData* SendCopyRequest::release_block_data() {
  auto temp = unsafe_arena_release_block_data();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::alimama::proto::BlockData* SendCopyRequest::unsafe_arena_release_block_data() {
  // @@protoc_insertion_point(field_release:alimama.proto.SendCopyRequest.block_data)
  
  ::alimama::proto::BlockData* temp = block_data_;
  block_data_ = nullptr;
  return temp;
}
inline ::alimama::proto::BlockData* SendCopyRequest::_internal_mutable_block_data() {
  
  if (block_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::alimama::proto::BlockData>(GetArena());
    block_data_ = p;
  }
  return block_data_;
}
inline ::alimama::proto::BlockData* SendCopyRequest::mutable_block_data() {
  // @@protoc_insertion_point(field_mutable:alimama.proto.SendCopyRequest.block_data)
  return _internal_mutable_block_data();
}
inline void SendCopyRequest::set_allocated_block_data(::alimama::proto::BlockData* block_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete block_data_;
  }
  if (block_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(block_data);
    if (message_arena != submessage_arena) {
      block_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_data, submessage_arena);
    }
    
  } else {
    
  }
  block_data_ = block_data;
  // @@protoc_insertion_point(field_set_allocated:alimama.proto.SendCopyRequest.block_data)
}

// -------------------------------------------------------------------

// SendCopyResponse

// bool ok = 1;
inline void SendCopyResponse::clear_ok() {
  ok_ = false;
}
inline bool SendCopyResponse::_internal_ok() const {
  return ok_;
}
inline bool SendCopyResponse::ok() const {
  // @@protoc_insertion_point(field_get:alimama.proto.SendCopyResponse.ok)
  return _internal_ok();
}
inline void SendCopyResponse::_internal_set_ok(bool value) {
  
  ok_ = value;
}
inline void SendCopyResponse::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:alimama.proto.SendCopyResponse.ok)
}

// -------------------------------------------------------------------

// LoadAndRemoveRequest

// repeated .alimama.proto.SliceInfo slice_info = 1;
inline int LoadAndRemoveRequest::_internal_slice_info_size() const {
  return slice_info_.size();
}
inline int LoadAndRemoveRequest::slice_info_size() const {
  return _internal_slice_info_size();
}
inline void LoadAndRemoveRequest::clear_slice_info() {
  slice_info_.Clear();
}
inline ::alimama::proto::SliceInfo* LoadAndRemoveRequest::mutable_slice_info(int index) {
  // @@protoc_insertion_point(field_mutable:alimama.proto.LoadAndRemoveRequest.slice_info)
  return slice_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::alimama::proto::SliceInfo >*
LoadAndRemoveRequest::mutable_slice_info() {
  // @@protoc_insertion_point(field_mutable_list:alimama.proto.LoadAndRemoveRequest.slice_info)
  return &slice_info_;
}
inline const ::alimama::proto::SliceInfo& LoadAndRemoveRequest::_internal_slice_info(int index) const {
  return slice_info_.Get(index);
}
inline const ::alimama::proto::SliceInfo& LoadAndRemoveRequest::slice_info(int index) const {
  // @@protoc_insertion_point(field_get:alimama.proto.LoadAndRemoveRequest.slice_info)
  return _internal_slice_info(index);
}
inline ::alimama::proto::SliceInfo* LoadAndRemoveRequest::_internal_add_slice_info() {
  return slice_info_.Add();
}
inline ::alimama::proto::SliceInfo* LoadAndRemoveRequest::add_slice_info() {
  // @@protoc_insertion_point(field_add:alimama.proto.LoadAndRemoveRequest.slice_info)
  return _internal_add_slice_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::alimama::proto::SliceInfo >&
LoadAndRemoveRequest::slice_info() const {
  // @@protoc_insertion_point(field_list:alimama.proto.LoadAndRemoveRequest.slice_info)
  return slice_info_;
}

// -------------------------------------------------------------------

// LoadAndRemoveResponse

// bool ok = 1;
inline void LoadAndRemoveResponse::clear_ok() {
  ok_ = false;
}
inline bool LoadAndRemoveResponse::_internal_ok() const {
  return ok_;
}
inline bool LoadAndRemoveResponse::ok() const {
  // @@protoc_insertion_point(field_get:alimama.proto.LoadAndRemoveResponse.ok)
  return _internal_ok();
}
inline void LoadAndRemoveResponse::_internal_set_ok(bool value) {
  
  ok_ = value;
}
inline void LoadAndRemoveResponse::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:alimama.proto.LoadAndRemoveResponse.ok)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace alimama

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_alimama_2eproto
