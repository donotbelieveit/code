// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: alimama.proto
#ifndef GRPC_alimama_2eproto__INCLUDED
#define GRPC_alimama_2eproto__INCLUDED

#include "alimama.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace alimama {
namespace proto {

class ModelService final {
 public:
  static constexpr char const* service_full_name() {
    return "alimama.proto.ModelService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Get(::grpc::ClientContext* context, const ::alimama::proto::Request& request, ::alimama::proto::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::alimama::proto::Response>> AsyncGet(::grpc::ClientContext* context, const ::alimama::proto::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::alimama::proto::Response>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::alimama::proto::Response>> PrepareAsyncGet(::grpc::ClientContext* context, const ::alimama::proto::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::alimama::proto::Response>>(PrepareAsyncGetRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Get(::grpc::ClientContext* context, const ::alimama::proto::Request* request, ::alimama::proto::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::alimama::proto::Response* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Get(::grpc::ClientContext* context, const ::alimama::proto::Request* request, ::alimama::proto::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Get(::grpc::ClientContext* context, const ::alimama::proto::Request* request, ::alimama::proto::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::alimama::proto::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::alimama::proto::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::alimama::proto::Response>* AsyncGetRaw(::grpc::ClientContext* context, const ::alimama::proto::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::alimama::proto::Response>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::alimama::proto::Request& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Get(::grpc::ClientContext* context, const ::alimama::proto::Request& request, ::alimama::proto::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::alimama::proto::Response>> AsyncGet(::grpc::ClientContext* context, const ::alimama::proto::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::alimama::proto::Response>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::alimama::proto::Response>> PrepareAsyncGet(::grpc::ClientContext* context, const ::alimama::proto::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::alimama::proto::Response>>(PrepareAsyncGetRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Get(::grpc::ClientContext* context, const ::alimama::proto::Request* request, ::alimama::proto::Response* response, std::function<void(::grpc::Status)>) override;
      void Get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::alimama::proto::Response* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Get(::grpc::ClientContext* context, const ::alimama::proto::Request* request, ::alimama::proto::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Get(::grpc::ClientContext* context, const ::alimama::proto::Request* request, ::alimama::proto::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::alimama::proto::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::alimama::proto::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::alimama::proto::Response>* AsyncGetRaw(::grpc::ClientContext* context, const ::alimama::proto::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::alimama::proto::Response>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::alimama::proto::Request& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Get_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Get(::grpc::ServerContext* context, const ::alimama::proto::Request* request, ::alimama::proto::Response* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Get() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::alimama::proto::Request* /*request*/, ::alimama::proto::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::alimama::proto::Request* request, ::grpc::ServerAsyncResponseWriter< ::alimama::proto::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Get<Service > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Get() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::alimama::proto::Request, ::alimama::proto::Response>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::alimama::proto::Request* request, ::alimama::proto::Response* response) { return this->Get(context, request, response); }));}
    void SetMessageAllocatorFor_Get(
        ::grpc::experimental::MessageAllocator< ::alimama::proto::Request, ::alimama::proto::Response>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::alimama::proto::Request, ::alimama::proto::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::alimama::proto::Request* /*request*/, ::alimama::proto::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Get(
      ::grpc::CallbackServerContext* /*context*/, const ::alimama::proto::Request* /*request*/, ::alimama::proto::Response* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Get(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::alimama::proto::Request* /*request*/, ::alimama::proto::Response* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Get<Service > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Get<Service > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Get() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::alimama::proto::Request* /*request*/, ::alimama::proto::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Get() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::alimama::proto::Request* /*request*/, ::alimama::proto::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Get() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Get(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::alimama::proto::Request* /*request*/, ::alimama::proto::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Get(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Get(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Get() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::alimama::proto::Request, ::alimama::proto::Response>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::alimama::proto::Request, ::alimama::proto::Response>* streamer) {
                       return this->StreamedGet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::alimama::proto::Request* /*request*/, ::alimama::proto::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::alimama::proto::Request,::alimama::proto::Response>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Get<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Get<Service > StreamedService;
};

class NodeService final {
 public:
  static constexpr char const* service_full_name() {
    return "alimama.proto.NodeService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 发送读取请求节点根据data_info读取指定块，返回块的data
    virtual ::grpc::Status GetBlockData(::grpc::ClientContext* context, const ::alimama::proto::GetBlockDataRequest& request, ::alimama::proto::GetBlockDataResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::alimama::proto::GetBlockDataResponse>> AsyncGetBlockData(::grpc::ClientContext* context, const ::alimama::proto::GetBlockDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::alimama::proto::GetBlockDataResponse>>(AsyncGetBlockDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::alimama::proto::GetBlockDataResponse>> PrepareAsyncGetBlockData(::grpc::ClientContext* context, const ::alimama::proto::GetBlockDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::alimama::proto::GetBlockDataResponse>>(PrepareAsyncGetBlockDataRaw(context, request, cq));
    }
    // 节点读取slice后将副本传向指定节点
    virtual ::grpc::Status SendCopy(::grpc::ClientContext* context, const ::alimama::proto::SendCopyRequest& request, ::alimama::proto::SendCopyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::alimama::proto::SendCopyResponse>> AsyncSendCopy(::grpc::ClientContext* context, const ::alimama::proto::SendCopyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::alimama::proto::SendCopyResponse>>(AsyncSendCopyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::alimama::proto::SendCopyResponse>> PrepareAsyncSendCopy(::grpc::ClientContext* context, const ::alimama::proto::SendCopyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::alimama::proto::SendCopyResponse>>(PrepareAsyncSendCopyRaw(context, request, cq));
    }
    // load新版本的slice并发送第一副本
    // 各节点接收到第一副本后向pd发送ok，等待1s，
    // pd将包含旧版本第二副本的所有请求回复
    // node将旧版本第二副本删除
    // node将第二副本发送给指定节点
    // 接受完成后向pd发送ok，等待1s
    // pd将所有包含旧版本请求回复
    // 系统进入新版本
    virtual ::grpc::Status LoadAndRemove1(::grpc::ClientContext* context, const ::alimama::proto::LoadAndRemoveRequest& request, ::alimama::proto::LoadAndRemoveResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::alimama::proto::LoadAndRemoveResponse>> AsyncLoadAndRemove1(::grpc::ClientContext* context, const ::alimama::proto::LoadAndRemoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::alimama::proto::LoadAndRemoveResponse>>(AsyncLoadAndRemove1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::alimama::proto::LoadAndRemoveResponse>> PrepareAsyncLoadAndRemove1(::grpc::ClientContext* context, const ::alimama::proto::LoadAndRemoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::alimama::proto::LoadAndRemoveResponse>>(PrepareAsyncLoadAndRemove1Raw(context, request, cq));
    }
    virtual ::grpc::Status LoadAndRemove2(::grpc::ClientContext* context, const ::alimama::proto::LoadAndRemoveRequest& request, ::alimama::proto::LoadAndRemoveResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::alimama::proto::LoadAndRemoveResponse>> AsyncLoadAndRemove2(::grpc::ClientContext* context, const ::alimama::proto::LoadAndRemoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::alimama::proto::LoadAndRemoveResponse>>(AsyncLoadAndRemove2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::alimama::proto::LoadAndRemoveResponse>> PrepareAsyncLoadAndRemove2(::grpc::ClientContext* context, const ::alimama::proto::LoadAndRemoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::alimama::proto::LoadAndRemoveResponse>>(PrepareAsyncLoadAndRemove2Raw(context, request, cq));
    }
    // 按照version进入版本文件夹，读取指定slice
    // load完slice后，根据block_info将buffer中的data发往指定节点
    virtual ::grpc::Status Slice2Block(::grpc::ClientContext* context, const ::alimama::proto::Slice2BlockRequest& request, ::alimama::proto::Slice2BlockResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::alimama::proto::Slice2BlockResponse>> AsyncSlice2Block(::grpc::ClientContext* context, const ::alimama::proto::Slice2BlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::alimama::proto::Slice2BlockResponse>>(AsyncSlice2BlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::alimama::proto::Slice2BlockResponse>> PrepareAsyncSlice2Block(::grpc::ClientContext* context, const ::alimama::proto::Slice2BlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::alimama::proto::Slice2BlockResponse>>(PrepareAsyncSlice2BlockRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // 发送读取请求节点根据data_info读取指定块，返回块的data
      virtual void GetBlockData(::grpc::ClientContext* context, const ::alimama::proto::GetBlockDataRequest* request, ::alimama::proto::GetBlockDataResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetBlockData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::alimama::proto::GetBlockDataResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetBlockData(::grpc::ClientContext* context, const ::alimama::proto::GetBlockDataRequest* request, ::alimama::proto::GetBlockDataResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetBlockData(::grpc::ClientContext* context, const ::alimama::proto::GetBlockDataRequest* request, ::alimama::proto::GetBlockDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetBlockData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::alimama::proto::GetBlockDataResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetBlockData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::alimama::proto::GetBlockDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 节点读取slice后将副本传向指定节点
      virtual void SendCopy(::grpc::ClientContext* context, const ::alimama::proto::SendCopyRequest* request, ::alimama::proto::SendCopyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendCopy(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::alimama::proto::SendCopyResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SendCopy(::grpc::ClientContext* context, const ::alimama::proto::SendCopyRequest* request, ::alimama::proto::SendCopyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SendCopy(::grpc::ClientContext* context, const ::alimama::proto::SendCopyRequest* request, ::alimama::proto::SendCopyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SendCopy(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::alimama::proto::SendCopyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SendCopy(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::alimama::proto::SendCopyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // load新版本的slice并发送第一副本
      // 各节点接收到第一副本后向pd发送ok，等待1s，
      // pd将包含旧版本第二副本的所有请求回复
      // node将旧版本第二副本删除
      // node将第二副本发送给指定节点
      // 接受完成后向pd发送ok，等待1s
      // pd将所有包含旧版本请求回复
      // 系统进入新版本
      virtual void LoadAndRemove1(::grpc::ClientContext* context, const ::alimama::proto::LoadAndRemoveRequest* request, ::alimama::proto::LoadAndRemoveResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LoadAndRemove1(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::alimama::proto::LoadAndRemoveResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void LoadAndRemove1(::grpc::ClientContext* context, const ::alimama::proto::LoadAndRemoveRequest* request, ::alimama::proto::LoadAndRemoveResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void LoadAndRemove1(::grpc::ClientContext* context, const ::alimama::proto::LoadAndRemoveRequest* request, ::alimama::proto::LoadAndRemoveResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void LoadAndRemove1(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::alimama::proto::LoadAndRemoveResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void LoadAndRemove1(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::alimama::proto::LoadAndRemoveResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void LoadAndRemove2(::grpc::ClientContext* context, const ::alimama::proto::LoadAndRemoveRequest* request, ::alimama::proto::LoadAndRemoveResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LoadAndRemove2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::alimama::proto::LoadAndRemoveResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void LoadAndRemove2(::grpc::ClientContext* context, const ::alimama::proto::LoadAndRemoveRequest* request, ::alimama::proto::LoadAndRemoveResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void LoadAndRemove2(::grpc::ClientContext* context, const ::alimama::proto::LoadAndRemoveRequest* request, ::alimama::proto::LoadAndRemoveResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void LoadAndRemove2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::alimama::proto::LoadAndRemoveResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void LoadAndRemove2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::alimama::proto::LoadAndRemoveResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 按照version进入版本文件夹，读取指定slice
      // load完slice后，根据block_info将buffer中的data发往指定节点
      virtual void Slice2Block(::grpc::ClientContext* context, const ::alimama::proto::Slice2BlockRequest* request, ::alimama::proto::Slice2BlockResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Slice2Block(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::alimama::proto::Slice2BlockResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Slice2Block(::grpc::ClientContext* context, const ::alimama::proto::Slice2BlockRequest* request, ::alimama::proto::Slice2BlockResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Slice2Block(::grpc::ClientContext* context, const ::alimama::proto::Slice2BlockRequest* request, ::alimama::proto::Slice2BlockResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Slice2Block(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::alimama::proto::Slice2BlockResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Slice2Block(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::alimama::proto::Slice2BlockResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::alimama::proto::GetBlockDataResponse>* AsyncGetBlockDataRaw(::grpc::ClientContext* context, const ::alimama::proto::GetBlockDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::alimama::proto::GetBlockDataResponse>* PrepareAsyncGetBlockDataRaw(::grpc::ClientContext* context, const ::alimama::proto::GetBlockDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::alimama::proto::SendCopyResponse>* AsyncSendCopyRaw(::grpc::ClientContext* context, const ::alimama::proto::SendCopyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::alimama::proto::SendCopyResponse>* PrepareAsyncSendCopyRaw(::grpc::ClientContext* context, const ::alimama::proto::SendCopyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::alimama::proto::LoadAndRemoveResponse>* AsyncLoadAndRemove1Raw(::grpc::ClientContext* context, const ::alimama::proto::LoadAndRemoveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::alimama::proto::LoadAndRemoveResponse>* PrepareAsyncLoadAndRemove1Raw(::grpc::ClientContext* context, const ::alimama::proto::LoadAndRemoveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::alimama::proto::LoadAndRemoveResponse>* AsyncLoadAndRemove2Raw(::grpc::ClientContext* context, const ::alimama::proto::LoadAndRemoveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::alimama::proto::LoadAndRemoveResponse>* PrepareAsyncLoadAndRemove2Raw(::grpc::ClientContext* context, const ::alimama::proto::LoadAndRemoveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::alimama::proto::Slice2BlockResponse>* AsyncSlice2BlockRaw(::grpc::ClientContext* context, const ::alimama::proto::Slice2BlockRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::alimama::proto::Slice2BlockResponse>* PrepareAsyncSlice2BlockRaw(::grpc::ClientContext* context, const ::alimama::proto::Slice2BlockRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetBlockData(::grpc::ClientContext* context, const ::alimama::proto::GetBlockDataRequest& request, ::alimama::proto::GetBlockDataResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::alimama::proto::GetBlockDataResponse>> AsyncGetBlockData(::grpc::ClientContext* context, const ::alimama::proto::GetBlockDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::alimama::proto::GetBlockDataResponse>>(AsyncGetBlockDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::alimama::proto::GetBlockDataResponse>> PrepareAsyncGetBlockData(::grpc::ClientContext* context, const ::alimama::proto::GetBlockDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::alimama::proto::GetBlockDataResponse>>(PrepareAsyncGetBlockDataRaw(context, request, cq));
    }
    ::grpc::Status SendCopy(::grpc::ClientContext* context, const ::alimama::proto::SendCopyRequest& request, ::alimama::proto::SendCopyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::alimama::proto::SendCopyResponse>> AsyncSendCopy(::grpc::ClientContext* context, const ::alimama::proto::SendCopyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::alimama::proto::SendCopyResponse>>(AsyncSendCopyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::alimama::proto::SendCopyResponse>> PrepareAsyncSendCopy(::grpc::ClientContext* context, const ::alimama::proto::SendCopyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::alimama::proto::SendCopyResponse>>(PrepareAsyncSendCopyRaw(context, request, cq));
    }
    ::grpc::Status LoadAndRemove1(::grpc::ClientContext* context, const ::alimama::proto::LoadAndRemoveRequest& request, ::alimama::proto::LoadAndRemoveResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::alimama::proto::LoadAndRemoveResponse>> AsyncLoadAndRemove1(::grpc::ClientContext* context, const ::alimama::proto::LoadAndRemoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::alimama::proto::LoadAndRemoveResponse>>(AsyncLoadAndRemove1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::alimama::proto::LoadAndRemoveResponse>> PrepareAsyncLoadAndRemove1(::grpc::ClientContext* context, const ::alimama::proto::LoadAndRemoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::alimama::proto::LoadAndRemoveResponse>>(PrepareAsyncLoadAndRemove1Raw(context, request, cq));
    }
    ::grpc::Status LoadAndRemove2(::grpc::ClientContext* context, const ::alimama::proto::LoadAndRemoveRequest& request, ::alimama::proto::LoadAndRemoveResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::alimama::proto::LoadAndRemoveResponse>> AsyncLoadAndRemove2(::grpc::ClientContext* context, const ::alimama::proto::LoadAndRemoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::alimama::proto::LoadAndRemoveResponse>>(AsyncLoadAndRemove2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::alimama::proto::LoadAndRemoveResponse>> PrepareAsyncLoadAndRemove2(::grpc::ClientContext* context, const ::alimama::proto::LoadAndRemoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::alimama::proto::LoadAndRemoveResponse>>(PrepareAsyncLoadAndRemove2Raw(context, request, cq));
    }
    ::grpc::Status Slice2Block(::grpc::ClientContext* context, const ::alimama::proto::Slice2BlockRequest& request, ::alimama::proto::Slice2BlockResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::alimama::proto::Slice2BlockResponse>> AsyncSlice2Block(::grpc::ClientContext* context, const ::alimama::proto::Slice2BlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::alimama::proto::Slice2BlockResponse>>(AsyncSlice2BlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::alimama::proto::Slice2BlockResponse>> PrepareAsyncSlice2Block(::grpc::ClientContext* context, const ::alimama::proto::Slice2BlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::alimama::proto::Slice2BlockResponse>>(PrepareAsyncSlice2BlockRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetBlockData(::grpc::ClientContext* context, const ::alimama::proto::GetBlockDataRequest* request, ::alimama::proto::GetBlockDataResponse* response, std::function<void(::grpc::Status)>) override;
      void GetBlockData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::alimama::proto::GetBlockDataResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetBlockData(::grpc::ClientContext* context, const ::alimama::proto::GetBlockDataRequest* request, ::alimama::proto::GetBlockDataResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetBlockData(::grpc::ClientContext* context, const ::alimama::proto::GetBlockDataRequest* request, ::alimama::proto::GetBlockDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetBlockData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::alimama::proto::GetBlockDataResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetBlockData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::alimama::proto::GetBlockDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SendCopy(::grpc::ClientContext* context, const ::alimama::proto::SendCopyRequest* request, ::alimama::proto::SendCopyResponse* response, std::function<void(::grpc::Status)>) override;
      void SendCopy(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::alimama::proto::SendCopyResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SendCopy(::grpc::ClientContext* context, const ::alimama::proto::SendCopyRequest* request, ::alimama::proto::SendCopyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SendCopy(::grpc::ClientContext* context, const ::alimama::proto::SendCopyRequest* request, ::alimama::proto::SendCopyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SendCopy(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::alimama::proto::SendCopyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SendCopy(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::alimama::proto::SendCopyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void LoadAndRemove1(::grpc::ClientContext* context, const ::alimama::proto::LoadAndRemoveRequest* request, ::alimama::proto::LoadAndRemoveResponse* response, std::function<void(::grpc::Status)>) override;
      void LoadAndRemove1(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::alimama::proto::LoadAndRemoveResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void LoadAndRemove1(::grpc::ClientContext* context, const ::alimama::proto::LoadAndRemoveRequest* request, ::alimama::proto::LoadAndRemoveResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void LoadAndRemove1(::grpc::ClientContext* context, const ::alimama::proto::LoadAndRemoveRequest* request, ::alimama::proto::LoadAndRemoveResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void LoadAndRemove1(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::alimama::proto::LoadAndRemoveResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void LoadAndRemove1(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::alimama::proto::LoadAndRemoveResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void LoadAndRemove2(::grpc::ClientContext* context, const ::alimama::proto::LoadAndRemoveRequest* request, ::alimama::proto::LoadAndRemoveResponse* response, std::function<void(::grpc::Status)>) override;
      void LoadAndRemove2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::alimama::proto::LoadAndRemoveResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void LoadAndRemove2(::grpc::ClientContext* context, const ::alimama::proto::LoadAndRemoveRequest* request, ::alimama::proto::LoadAndRemoveResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void LoadAndRemove2(::grpc::ClientContext* context, const ::alimama::proto::LoadAndRemoveRequest* request, ::alimama::proto::LoadAndRemoveResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void LoadAndRemove2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::alimama::proto::LoadAndRemoveResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void LoadAndRemove2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::alimama::proto::LoadAndRemoveResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Slice2Block(::grpc::ClientContext* context, const ::alimama::proto::Slice2BlockRequest* request, ::alimama::proto::Slice2BlockResponse* response, std::function<void(::grpc::Status)>) override;
      void Slice2Block(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::alimama::proto::Slice2BlockResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Slice2Block(::grpc::ClientContext* context, const ::alimama::proto::Slice2BlockRequest* request, ::alimama::proto::Slice2BlockResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Slice2Block(::grpc::ClientContext* context, const ::alimama::proto::Slice2BlockRequest* request, ::alimama::proto::Slice2BlockResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Slice2Block(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::alimama::proto::Slice2BlockResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Slice2Block(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::alimama::proto::Slice2BlockResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::alimama::proto::GetBlockDataResponse>* AsyncGetBlockDataRaw(::grpc::ClientContext* context, const ::alimama::proto::GetBlockDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::alimama::proto::GetBlockDataResponse>* PrepareAsyncGetBlockDataRaw(::grpc::ClientContext* context, const ::alimama::proto::GetBlockDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::alimama::proto::SendCopyResponse>* AsyncSendCopyRaw(::grpc::ClientContext* context, const ::alimama::proto::SendCopyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::alimama::proto::SendCopyResponse>* PrepareAsyncSendCopyRaw(::grpc::ClientContext* context, const ::alimama::proto::SendCopyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::alimama::proto::LoadAndRemoveResponse>* AsyncLoadAndRemove1Raw(::grpc::ClientContext* context, const ::alimama::proto::LoadAndRemoveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::alimama::proto::LoadAndRemoveResponse>* PrepareAsyncLoadAndRemove1Raw(::grpc::ClientContext* context, const ::alimama::proto::LoadAndRemoveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::alimama::proto::LoadAndRemoveResponse>* AsyncLoadAndRemove2Raw(::grpc::ClientContext* context, const ::alimama::proto::LoadAndRemoveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::alimama::proto::LoadAndRemoveResponse>* PrepareAsyncLoadAndRemove2Raw(::grpc::ClientContext* context, const ::alimama::proto::LoadAndRemoveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::alimama::proto::Slice2BlockResponse>* AsyncSlice2BlockRaw(::grpc::ClientContext* context, const ::alimama::proto::Slice2BlockRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::alimama::proto::Slice2BlockResponse>* PrepareAsyncSlice2BlockRaw(::grpc::ClientContext* context, const ::alimama::proto::Slice2BlockRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetBlockData_;
    const ::grpc::internal::RpcMethod rpcmethod_SendCopy_;
    const ::grpc::internal::RpcMethod rpcmethod_LoadAndRemove1_;
    const ::grpc::internal::RpcMethod rpcmethod_LoadAndRemove2_;
    const ::grpc::internal::RpcMethod rpcmethod_Slice2Block_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 发送读取请求节点根据data_info读取指定块，返回块的data
    virtual ::grpc::Status GetBlockData(::grpc::ServerContext* context, const ::alimama::proto::GetBlockDataRequest* request, ::alimama::proto::GetBlockDataResponse* response);
    // 节点读取slice后将副本传向指定节点
    virtual ::grpc::Status SendCopy(::grpc::ServerContext* context, const ::alimama::proto::SendCopyRequest* request, ::alimama::proto::SendCopyResponse* response);
    // load新版本的slice并发送第一副本
    // 各节点接收到第一副本后向pd发送ok，等待1s，
    // pd将包含旧版本第二副本的所有请求回复
    // node将旧版本第二副本删除
    // node将第二副本发送给指定节点
    // 接受完成后向pd发送ok，等待1s
    // pd将所有包含旧版本请求回复
    // 系统进入新版本
    virtual ::grpc::Status LoadAndRemove1(::grpc::ServerContext* context, const ::alimama::proto::LoadAndRemoveRequest* request, ::alimama::proto::LoadAndRemoveResponse* response);
    virtual ::grpc::Status LoadAndRemove2(::grpc::ServerContext* context, const ::alimama::proto::LoadAndRemoveRequest* request, ::alimama::proto::LoadAndRemoveResponse* response);
    // 按照version进入版本文件夹，读取指定slice
    // load完slice后，根据block_info将buffer中的data发往指定节点
    virtual ::grpc::Status Slice2Block(::grpc::ServerContext* context, const ::alimama::proto::Slice2BlockRequest* request, ::alimama::proto::Slice2BlockResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBlockData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBlockData() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetBlockData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockData(::grpc::ServerContext* /*context*/, const ::alimama::proto::GetBlockDataRequest* /*request*/, ::alimama::proto::GetBlockDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlockData(::grpc::ServerContext* context, ::alimama::proto::GetBlockDataRequest* request, ::grpc::ServerAsyncResponseWriter< ::alimama::proto::GetBlockDataResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendCopy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendCopy() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SendCopy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendCopy(::grpc::ServerContext* /*context*/, const ::alimama::proto::SendCopyRequest* /*request*/, ::alimama::proto::SendCopyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendCopy(::grpc::ServerContext* context, ::alimama::proto::SendCopyRequest* request, ::grpc::ServerAsyncResponseWriter< ::alimama::proto::SendCopyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LoadAndRemove1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LoadAndRemove1() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_LoadAndRemove1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadAndRemove1(::grpc::ServerContext* /*context*/, const ::alimama::proto::LoadAndRemoveRequest* /*request*/, ::alimama::proto::LoadAndRemoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadAndRemove1(::grpc::ServerContext* context, ::alimama::proto::LoadAndRemoveRequest* request, ::grpc::ServerAsyncResponseWriter< ::alimama::proto::LoadAndRemoveResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LoadAndRemove2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LoadAndRemove2() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_LoadAndRemove2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadAndRemove2(::grpc::ServerContext* /*context*/, const ::alimama::proto::LoadAndRemoveRequest* /*request*/, ::alimama::proto::LoadAndRemoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadAndRemove2(::grpc::ServerContext* context, ::alimama::proto::LoadAndRemoveRequest* request, ::grpc::ServerAsyncResponseWriter< ::alimama::proto::LoadAndRemoveResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Slice2Block : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Slice2Block() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Slice2Block() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Slice2Block(::grpc::ServerContext* /*context*/, const ::alimama::proto::Slice2BlockRequest* /*request*/, ::alimama::proto::Slice2BlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSlice2Block(::grpc::ServerContext* context, ::alimama::proto::Slice2BlockRequest* request, ::grpc::ServerAsyncResponseWriter< ::alimama::proto::Slice2BlockResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetBlockData<WithAsyncMethod_SendCopy<WithAsyncMethod_LoadAndRemove1<WithAsyncMethod_LoadAndRemove2<WithAsyncMethod_Slice2Block<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetBlockData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetBlockData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::alimama::proto::GetBlockDataRequest, ::alimama::proto::GetBlockDataResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::alimama::proto::GetBlockDataRequest* request, ::alimama::proto::GetBlockDataResponse* response) { return this->GetBlockData(context, request, response); }));}
    void SetMessageAllocatorFor_GetBlockData(
        ::grpc::experimental::MessageAllocator< ::alimama::proto::GetBlockDataRequest, ::alimama::proto::GetBlockDataResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::alimama::proto::GetBlockDataRequest, ::alimama::proto::GetBlockDataResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetBlockData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockData(::grpc::ServerContext* /*context*/, const ::alimama::proto::GetBlockDataRequest* /*request*/, ::alimama::proto::GetBlockDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetBlockData(
      ::grpc::CallbackServerContext* /*context*/, const ::alimama::proto::GetBlockDataRequest* /*request*/, ::alimama::proto::GetBlockDataResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetBlockData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::alimama::proto::GetBlockDataRequest* /*request*/, ::alimama::proto::GetBlockDataResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SendCopy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SendCopy() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::alimama::proto::SendCopyRequest, ::alimama::proto::SendCopyResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::alimama::proto::SendCopyRequest* request, ::alimama::proto::SendCopyResponse* response) { return this->SendCopy(context, request, response); }));}
    void SetMessageAllocatorFor_SendCopy(
        ::grpc::experimental::MessageAllocator< ::alimama::proto::SendCopyRequest, ::alimama::proto::SendCopyResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::alimama::proto::SendCopyRequest, ::alimama::proto::SendCopyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SendCopy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendCopy(::grpc::ServerContext* /*context*/, const ::alimama::proto::SendCopyRequest* /*request*/, ::alimama::proto::SendCopyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SendCopy(
      ::grpc::CallbackServerContext* /*context*/, const ::alimama::proto::SendCopyRequest* /*request*/, ::alimama::proto::SendCopyResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SendCopy(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::alimama::proto::SendCopyRequest* /*request*/, ::alimama::proto::SendCopyResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_LoadAndRemove1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_LoadAndRemove1() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::alimama::proto::LoadAndRemoveRequest, ::alimama::proto::LoadAndRemoveResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::alimama::proto::LoadAndRemoveRequest* request, ::alimama::proto::LoadAndRemoveResponse* response) { return this->LoadAndRemove1(context, request, response); }));}
    void SetMessageAllocatorFor_LoadAndRemove1(
        ::grpc::experimental::MessageAllocator< ::alimama::proto::LoadAndRemoveRequest, ::alimama::proto::LoadAndRemoveResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::alimama::proto::LoadAndRemoveRequest, ::alimama::proto::LoadAndRemoveResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_LoadAndRemove1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadAndRemove1(::grpc::ServerContext* /*context*/, const ::alimama::proto::LoadAndRemoveRequest* /*request*/, ::alimama::proto::LoadAndRemoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* LoadAndRemove1(
      ::grpc::CallbackServerContext* /*context*/, const ::alimama::proto::LoadAndRemoveRequest* /*request*/, ::alimama::proto::LoadAndRemoveResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* LoadAndRemove1(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::alimama::proto::LoadAndRemoveRequest* /*request*/, ::alimama::proto::LoadAndRemoveResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_LoadAndRemove2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_LoadAndRemove2() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::alimama::proto::LoadAndRemoveRequest, ::alimama::proto::LoadAndRemoveResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::alimama::proto::LoadAndRemoveRequest* request, ::alimama::proto::LoadAndRemoveResponse* response) { return this->LoadAndRemove2(context, request, response); }));}
    void SetMessageAllocatorFor_LoadAndRemove2(
        ::grpc::experimental::MessageAllocator< ::alimama::proto::LoadAndRemoveRequest, ::alimama::proto::LoadAndRemoveResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::alimama::proto::LoadAndRemoveRequest, ::alimama::proto::LoadAndRemoveResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_LoadAndRemove2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadAndRemove2(::grpc::ServerContext* /*context*/, const ::alimama::proto::LoadAndRemoveRequest* /*request*/, ::alimama::proto::LoadAndRemoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* LoadAndRemove2(
      ::grpc::CallbackServerContext* /*context*/, const ::alimama::proto::LoadAndRemoveRequest* /*request*/, ::alimama::proto::LoadAndRemoveResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* LoadAndRemove2(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::alimama::proto::LoadAndRemoveRequest* /*request*/, ::alimama::proto::LoadAndRemoveResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Slice2Block : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Slice2Block() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::alimama::proto::Slice2BlockRequest, ::alimama::proto::Slice2BlockResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::alimama::proto::Slice2BlockRequest* request, ::alimama::proto::Slice2BlockResponse* response) { return this->Slice2Block(context, request, response); }));}
    void SetMessageAllocatorFor_Slice2Block(
        ::grpc::experimental::MessageAllocator< ::alimama::proto::Slice2BlockRequest, ::alimama::proto::Slice2BlockResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::alimama::proto::Slice2BlockRequest, ::alimama::proto::Slice2BlockResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Slice2Block() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Slice2Block(::grpc::ServerContext* /*context*/, const ::alimama::proto::Slice2BlockRequest* /*request*/, ::alimama::proto::Slice2BlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Slice2Block(
      ::grpc::CallbackServerContext* /*context*/, const ::alimama::proto::Slice2BlockRequest* /*request*/, ::alimama::proto::Slice2BlockResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Slice2Block(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::alimama::proto::Slice2BlockRequest* /*request*/, ::alimama::proto::Slice2BlockResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_GetBlockData<ExperimentalWithCallbackMethod_SendCopy<ExperimentalWithCallbackMethod_LoadAndRemove1<ExperimentalWithCallbackMethod_LoadAndRemove2<ExperimentalWithCallbackMethod_Slice2Block<Service > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_GetBlockData<ExperimentalWithCallbackMethod_SendCopy<ExperimentalWithCallbackMethod_LoadAndRemove1<ExperimentalWithCallbackMethod_LoadAndRemove2<ExperimentalWithCallbackMethod_Slice2Block<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetBlockData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBlockData() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetBlockData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockData(::grpc::ServerContext* /*context*/, const ::alimama::proto::GetBlockDataRequest* /*request*/, ::alimama::proto::GetBlockDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendCopy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendCopy() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SendCopy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendCopy(::grpc::ServerContext* /*context*/, const ::alimama::proto::SendCopyRequest* /*request*/, ::alimama::proto::SendCopyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LoadAndRemove1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LoadAndRemove1() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_LoadAndRemove1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadAndRemove1(::grpc::ServerContext* /*context*/, const ::alimama::proto::LoadAndRemoveRequest* /*request*/, ::alimama::proto::LoadAndRemoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LoadAndRemove2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LoadAndRemove2() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_LoadAndRemove2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadAndRemove2(::grpc::ServerContext* /*context*/, const ::alimama::proto::LoadAndRemoveRequest* /*request*/, ::alimama::proto::LoadAndRemoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Slice2Block : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Slice2Block() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Slice2Block() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Slice2Block(::grpc::ServerContext* /*context*/, const ::alimama::proto::Slice2BlockRequest* /*request*/, ::alimama::proto::Slice2BlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBlockData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBlockData() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetBlockData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockData(::grpc::ServerContext* /*context*/, const ::alimama::proto::GetBlockDataRequest* /*request*/, ::alimama::proto::GetBlockDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlockData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendCopy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendCopy() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SendCopy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendCopy(::grpc::ServerContext* /*context*/, const ::alimama::proto::SendCopyRequest* /*request*/, ::alimama::proto::SendCopyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendCopy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LoadAndRemove1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LoadAndRemove1() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_LoadAndRemove1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadAndRemove1(::grpc::ServerContext* /*context*/, const ::alimama::proto::LoadAndRemoveRequest* /*request*/, ::alimama::proto::LoadAndRemoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadAndRemove1(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LoadAndRemove2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LoadAndRemove2() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_LoadAndRemove2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadAndRemove2(::grpc::ServerContext* /*context*/, const ::alimama::proto::LoadAndRemoveRequest* /*request*/, ::alimama::proto::LoadAndRemoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadAndRemove2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Slice2Block : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Slice2Block() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Slice2Block() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Slice2Block(::grpc::ServerContext* /*context*/, const ::alimama::proto::Slice2BlockRequest* /*request*/, ::alimama::proto::Slice2BlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSlice2Block(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetBlockData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetBlockData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetBlockData(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetBlockData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockData(::grpc::ServerContext* /*context*/, const ::alimama::proto::GetBlockDataRequest* /*request*/, ::alimama::proto::GetBlockDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetBlockData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetBlockData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SendCopy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SendCopy() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendCopy(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SendCopy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendCopy(::grpc::ServerContext* /*context*/, const ::alimama::proto::SendCopyRequest* /*request*/, ::alimama::proto::SendCopyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SendCopy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SendCopy(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_LoadAndRemove1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_LoadAndRemove1() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->LoadAndRemove1(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_LoadAndRemove1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadAndRemove1(::grpc::ServerContext* /*context*/, const ::alimama::proto::LoadAndRemoveRequest* /*request*/, ::alimama::proto::LoadAndRemoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* LoadAndRemove1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* LoadAndRemove1(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_LoadAndRemove2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_LoadAndRemove2() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->LoadAndRemove2(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_LoadAndRemove2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadAndRemove2(::grpc::ServerContext* /*context*/, const ::alimama::proto::LoadAndRemoveRequest* /*request*/, ::alimama::proto::LoadAndRemoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* LoadAndRemove2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* LoadAndRemove2(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Slice2Block : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Slice2Block() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Slice2Block(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Slice2Block() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Slice2Block(::grpc::ServerContext* /*context*/, const ::alimama::proto::Slice2BlockRequest* /*request*/, ::alimama::proto::Slice2BlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Slice2Block(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Slice2Block(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBlockData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetBlockData() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::alimama::proto::GetBlockDataRequest, ::alimama::proto::GetBlockDataResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::alimama::proto::GetBlockDataRequest, ::alimama::proto::GetBlockDataResponse>* streamer) {
                       return this->StreamedGetBlockData(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetBlockData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBlockData(::grpc::ServerContext* /*context*/, const ::alimama::proto::GetBlockDataRequest* /*request*/, ::alimama::proto::GetBlockDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBlockData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::alimama::proto::GetBlockDataRequest,::alimama::proto::GetBlockDataResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendCopy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendCopy() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::alimama::proto::SendCopyRequest, ::alimama::proto::SendCopyResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::alimama::proto::SendCopyRequest, ::alimama::proto::SendCopyResponse>* streamer) {
                       return this->StreamedSendCopy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendCopy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendCopy(::grpc::ServerContext* /*context*/, const ::alimama::proto::SendCopyRequest* /*request*/, ::alimama::proto::SendCopyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendCopy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::alimama::proto::SendCopyRequest,::alimama::proto::SendCopyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LoadAndRemove1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_LoadAndRemove1() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::alimama::proto::LoadAndRemoveRequest, ::alimama::proto::LoadAndRemoveResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::alimama::proto::LoadAndRemoveRequest, ::alimama::proto::LoadAndRemoveResponse>* streamer) {
                       return this->StreamedLoadAndRemove1(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_LoadAndRemove1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LoadAndRemove1(::grpc::ServerContext* /*context*/, const ::alimama::proto::LoadAndRemoveRequest* /*request*/, ::alimama::proto::LoadAndRemoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLoadAndRemove1(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::alimama::proto::LoadAndRemoveRequest,::alimama::proto::LoadAndRemoveResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LoadAndRemove2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_LoadAndRemove2() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::alimama::proto::LoadAndRemoveRequest, ::alimama::proto::LoadAndRemoveResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::alimama::proto::LoadAndRemoveRequest, ::alimama::proto::LoadAndRemoveResponse>* streamer) {
                       return this->StreamedLoadAndRemove2(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_LoadAndRemove2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LoadAndRemove2(::grpc::ServerContext* /*context*/, const ::alimama::proto::LoadAndRemoveRequest* /*request*/, ::alimama::proto::LoadAndRemoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLoadAndRemove2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::alimama::proto::LoadAndRemoveRequest,::alimama::proto::LoadAndRemoveResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Slice2Block : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Slice2Block() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::alimama::proto::Slice2BlockRequest, ::alimama::proto::Slice2BlockResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::alimama::proto::Slice2BlockRequest, ::alimama::proto::Slice2BlockResponse>* streamer) {
                       return this->StreamedSlice2Block(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Slice2Block() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Slice2Block(::grpc::ServerContext* /*context*/, const ::alimama::proto::Slice2BlockRequest* /*request*/, ::alimama::proto::Slice2BlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSlice2Block(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::alimama::proto::Slice2BlockRequest,::alimama::proto::Slice2BlockResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetBlockData<WithStreamedUnaryMethod_SendCopy<WithStreamedUnaryMethod_LoadAndRemove1<WithStreamedUnaryMethod_LoadAndRemove2<WithStreamedUnaryMethod_Slice2Block<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetBlockData<WithStreamedUnaryMethod_SendCopy<WithStreamedUnaryMethod_LoadAndRemove1<WithStreamedUnaryMethod_LoadAndRemove2<WithStreamedUnaryMethod_Slice2Block<Service > > > > > StreamedService;
};

}  // namespace proto
}  // namespace alimama


#endif  // GRPC_alimama_2eproto__INCLUDED
